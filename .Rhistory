file = paste0(res_dir,"/multi.RData"))
}else{
load(paste0(res_dir,"/multi.RData"))
}
# anova chi-square
anova_df <- as.data.frame( plot(anova(model_obj), rm.totals=FALSE) )
colnames(anova_df) <- c("adjusted_chisq")
anova_df$varname <- rownames(anova_df)
anova_df$adjusted_chisq <- anova_df$adjusted_chisq - min(anova_df$adjusted_chisq, na.rm=TRUE)
anova_df$adjusted_chisq_prop <- anova_df$adjusted_chisq / anova_df$adjusted_chisq[which(anova_df$varname=="TOTAL")]
anova_df <- anova_df[which(!startsWith(anova_df$varname, "TOTAL")),c("varname", "adjusted_chisq_prop")]
anova_df$model <- "Ridge Regression"
rownames(anova_df) <- NULL
p_df <- as.data.frame( plot(anova(model_obj), what="P"))
colnames(p_df)<-"P"
p_df$varname <- row.names(p_df)
rownames(p_df) <- NULL
anova_df <- merge(anova_df, p_df, by="varname")
anova_df$p_value <- ifelse(anova_df$P<0.05, "p<0.05"," ")
anova_df_final <- anova_df
anova_df_final$varname <- stringr::str_to_lower( gsub("[^[:alnum:]]+"," ",anova_df_final$varname) )
anova_df_final$P <- round(anova_df_final$P, 4)
pdf <- permu_cvdf
pdf$model <- "Ridge Regression"
pdf$cvAUC <- cvAUC
pdf$varname <- gsub("permutate ", "",pdf$data)
pdf$varname <- stringr::str_to_lower( gsub("[^[:alnum:]]+"," ",pdf$varname) )
pdf <- merge(pdf, anova_df_final[,c("varname", "model", "p_value")], all.x=TRUE)
cvc_importance <- ggplot(pdf, aes(x=AUROC, y = tidytext::reorder_within(varname, -AUROC, model), color=p_value))+
geom_point() +
geom_vline(aes(xintercept = cvAUC)) +
scale_color_manual(values = c("p<0.05"="red")) +
scale_x_continuous(n.breaks = 5)+
tidytext::scale_y_reordered() +
facet_wrap(~model, scales = "free_y", ncol = 2) +
labs(y=NULL,x="\nAfter Permutation cvAUC", color = expression(paste(chi^{2}," test")))+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5, face="bold", colour="black", size = 12),
axis.text.y = element_text(face="bold", colour="black", size=13),
axis.title.y = element_text(face="bold", colour="black", size=12),
axis.text.x = element_text(face="bold", colour="black", size=12),
axis.title.x = element_text(face="bold", colour="black", size=14),
legend.title = element_text(face="bold", colour="black", size=12),
legend.text = element_text(face="bold", colour="black", size=10),
legend.position = "bottom",
strip.text.x = element_text(face="bold", colour="black", size=12))
cvc_importance %>% ggsave(filename = paste0(res_dir,"/cvc_importance.png"),width = 6,height=7, bg="white")
tradeoff_plot_inorg %>% ggsave(filename = paste0(res_dir,"/trade_offs.png"),width=8,height=3, bg="white")
cali_plot_inorg <- cali_plot_inorg + theme_bw()
cali_plot_inorg %>% ggsave(filename = paste0(res_dir,"/cali.png"),width=3,height=3, bg="white")
print(cvAUC)
library(readxl)
data <- read_excel("./data/Test Model Data.xlsx")
data_mdl <- assign.dict(data, get.dict(data))
data <- read_excel("./data/Test Demographic Data.xlsx")
data_demo <- assign.dict(data, get.dict(data))
# merge data in one
data <- merge(data_mdl[,setdiff(colnames(data_mdl),"EGA")], data_demo, all=TRUE)
# must be data.frame type object before use dictionary functions
data <- as.data.frame(data)
# Create dictionary for data
data <- remove.dict(data)
data <- assign.dict(data, get.dict(data))
dict_data <- get.dict(data) # get a dictionary for this data
dict_data$type[which(dict_data$varname=="VitalID")] <- "key"
dict_data$unique_per_sbj[which(dict_data$varname=="VitalID")] <- TRUE
rownames(dict_data) <- NULL
new_data <- data
new_dict_data <- dict_data
# median imputed
# Perform median imputation
for (var_name in names(median_ls)) {
if (var_name %in% names(new_data)) {
# Replace NA in new_data with the median value from median_values
new_data[[var_name]][is.na(new_data[[var_name]])] <- median_ls[[var_name]]
}
}
test_y <- rms::predictrms(model_obj, newdata = new_data)
write.csv( data.frame(p = 1/(1+exp(-test_y))), paste0(res_dir,"/test_p.csv"),row.names = F)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
output <- readRDS(paste0("./output_2024-04-10 23_01_50.773632.RDS"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
output <- readRDS(paste0("./res/output_2024-04-10 23_01_50.773632.RDS"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
output <- readRDS(paste0("./res/output_2024-04-10 23_01_50.773632.RDS"))
source("./sim_conditions.R")
res_df <- merge(output, simulation_conditions, by="id", all.x=T)
res_df$nic_diff <- res_df$nic - res_df$loodev
res_df$aic_diff <- res_df$aic - res_df$loodev
res_df$bic_diff <- res_df$bic - res_df$loodev
summary(res_df$aic_diff)
summary(res_df$nic_diff)
summary(res_df$bic_diff)
lr_sv_lme_plot <- list()
nic_vs_aic_plot <- list()
for(r in sigma_rdm_fix_ratio){
agg_df <- res_df %>%
filter(sigma_rdm_fix_ratio==r) %>%
group_by(id) %>%
summarise(bias0=median(bias0),
bias1=median(bias1),
nic_diff = median(nic_diff),
aic_diff = median(aic_diff),
bic_diff = median(bic_diff),
looauc = median(looauc),
loodev = median(loodev))
agg_df <- merge(agg_df, simulation_conditions, by="id", all.x=T)
plot_df <- pivot_longer(agg_df,
cols = starts_with("bias"),
names_to = "bias_type",
values_to = "bias_value")
plot_df$model <- ifelse(plot_df$bias_type=="bias0","LME", "LR")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
lr_sv_lme_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = bias_value, color = model)) +
geom_point(size=1) +
# scale_y_sqrt() +
scale_y_log10() +
facet_wrap(~n_cluster + n_obs_per_cluster, ncol = 5, nrow=2) +
labs(x = "Number of Predictors", y = "Bias in Coefficients", color = "Model") +
theme_bw()
plot_df <- pivot_longer(agg_df,
cols = ends_with("diff"),
names_to = "ic_type",
values_to = "ic_diff")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
nic_vs_aic_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = abs(ic_diff), color = ic_type)) +
geom_point(size=1) +
scale_y_sqrt()+
facet_wrap(~n_cluster + n_obs_per_cluster, ncol=5, nrow=2) +
labs(x = "Number of Predictors", y = "|IC - looDeviance|", color = "Evaluate LR") +
theme_bw()
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
output <- readRDS(paste0("./res/output_2024-04-10 23_01_50.773632.RDS"))
source("./sim_conditions.R")
res_df <- merge(output, simulation_conditions, by="id", all.x=T)
res_df$nic_diff <- res_df$nic - res_df$loodev
res_df$aic_diff <- res_df$aic - res_df$loodev
res_df$bic_diff <- res_df$bic - res_df$loodev
summary(res_df$aic_diff)
summary(res_df$nic_diff)
summary(res_df$bic_diff)
lr_sv_lme_plot <- list()
nic_vs_aic_plot <- list()
for(r in sigma_rdm_fix_ratio){
agg_df <- res_df %>%
filter(sigma_rdm_fix_ratio==r) %>%
group_by(id) %>%
summarise(bias0=median(bias0),
bias1=median(bias1),
nic_diff = median(nic_diff),
aic_diff = median(aic_diff),
bic_diff = median(bic_diff),
looauc = median(looauc),
loodev = median(loodev))
agg_df <- merge(agg_df, simulation_conditions, by="id", all.x=T)
plot_df <- pivot_longer(agg_df,
cols = starts_with("bias"),
names_to = "bias_type",
values_to = "bias_value")
plot_df$model <- ifelse(plot_df$bias_type=="bias0","LME", "LR")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
lr_sv_lme_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = bias_value, color = model)) +
geom_point(size=1) +
# scale_y_sqrt() +
scale_y_log10() +
facet_wrap(~n_cluster + n_obs_per_cluster, ncol = 5, nrow=2) +
labs(x = "Number of Predictors", y = "Bias in Coefficients", color = "Model") +
theme_bw()
plot_df <- pivot_longer(agg_df,
cols = ends_with("diff"),
names_to = "ic_type",
values_to = "ic_diff")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
nic_vs_aic_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = abs(ic_diff), color = ic_type)) +
geom_point(size=1) +
scale_y_sqrt()+
facet_wrap(~n_cluster + n_obs_per_cluster, ncol=5, nrow=2) +
labs(x = "Number of Predictors", y = "|IC - looDeviance|", color = "Evaluate LR") +
theme_bw()
}
p1 <- ggarrange(plotlist = lr_sv_lme_plot, nrow=3, ncol=1, common.legend =T, legend="right")
p1
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
output <- readRDS(paste0("./res/output_2024-04-10 23_01_50.773632.RDS"))
source("./sim_conditions.R")
res_df <- merge(output, simulation_conditions, by="id", all.x=T)
res_df$nic_diff <- res_df$nic - res_df$loodev
res_df$aic_diff <- res_df$aic - res_df$loodev
res_df$bic_diff <- res_df$bic - res_df$loodev
summary(res_df$aic_diff)
summary(res_df$nic_diff)
summary(res_df$bic_diff)
lr_sv_lme_plot <- list()
nic_vs_aic_plot <- list()
for(r in sigma_rdm_fix_ratio){
agg_df <- res_df %>%
filter(sigma_rdm_fix_ratio==r) %>%
group_by(id) %>%
summarise(bias0=median(bias0),
bias1=median(bias1),
nic_diff = median(nic_diff),
aic_diff = median(aic_diff),
bic_diff = median(bic_diff),
looauc = median(looauc),
loodev = median(loodev))
agg_df <- merge(agg_df, simulation_conditions, by="id", all.x=T)
plot_df <- pivot_longer(agg_df,
cols = starts_with("bias"),
names_to = "bias_type",
values_to = "bias_value")
plot_df$model <- ifelse(plot_df$bias_type=="bias0","LME", "LR")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
lr_sv_lme_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = bias_value, color = model)) +
geom_point(size=1) +
scale_y_sqrt() +
# scale_y_log10() +
facet_wrap(~n_cluster + n_obs_per_cluster, ncol = 5, nrow=2) +
labs(x = "Number of Predictors", y = "Bias in Coefficients", color = "Model") +
theme_bw()
plot_df <- pivot_longer(agg_df,
cols = ends_with("diff"),
names_to = "ic_type",
values_to = "ic_diff")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
nic_vs_aic_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = abs(ic_diff), color = ic_type)) +
geom_point(size=1) +
scale_y_sqrt()+
facet_wrap(~n_cluster + n_obs_per_cluster, ncol=5, nrow=2) +
labs(x = "Number of Predictors", y = "|IC - looDeviance|", color = "Evaluate LR") +
theme_bw()
}
p1 <- ggarrange(plotlist = lr_sv_lme_plot, nrow=3, ncol=1, common.legend =T, legend="right")
p2 <- ggarrange(plotlist = nic_vs_aic_plot, nrow=3, ncol=1, common.legend =T, legend="right")
p2
p1
p2
lr_sv_lme_plot <- list()
nic_vs_aic_plot <- list()
for(r in sigma_rdm_fix_ratio){
agg_df <- res_df %>%
filter(sigma_rdm_fix_ratio==r) %>%
group_by(id) %>%
summarise(bias0=median(bias0),
bias1=median(bias1),
nic_diff = median(nic_diff),
aic_diff = median(aic_diff),
bic_diff = median(bic_diff),
looauc = median(looauc),
loodev = median(loodev))
agg_df <- merge(agg_df, simulation_conditions, by="id", all.x=T)
plot_df <- pivot_longer(agg_df,
cols = starts_with("bias"),
names_to = "bias_type",
values_to = "bias_value")
plot_df$model <- ifelse(plot_df$bias_type=="bias0","LME", "LR")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
lr_sv_lme_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = bias_value, color = model)) +
geom_point(size=1) +
# scale_y_sqrt() +
scale_y_log10() +
facet_wrap(~n_cluster + n_obs_per_cluster, ncol = 5, nrow=2) +
labs(x = "Number of Predictors", y = "Bias in Coefficients", color = "Model") +
theme_bw()
plot_df <- pivot_longer(agg_df,
cols = ends_with("diff"),
names_to = "ic_type",
values_to = "ic_diff")
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " observations per cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 observations per cluster",
"10 observations per cluster",
"30 observations per cluster",
"50 observations per cluster",
"80 observations per cluster") )
plot_df$n_cluster <- paste0(plot_df$n_cluster, " clusters")
plot_df$n_cluster <- factor(plot_df$n_cluster, levels=c("50 clusters","100 clusters") )
nic_vs_aic_plot[[paste0("ratio=",r)]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = abs(ic_diff), color = ic_type)) +
geom_point(size=1) +
scale_y_sqrt()+
facet_wrap(~n_cluster + n_obs_per_cluster, ncol=5, nrow=2) +
labs(x = "Number of Predictors", y = "|IC - looDeviance|", color = "Evaluate LR") +
theme_bw()
}
p1 <- ggarrange(plotlist = lr_sv_lme_plot, nrow=3, ncol=1, common.legend =T, legend="right")
p2 <- ggarrange(plotlist = nic_vs_aic_plot, nrow=3, ncol=1, common.legend =T, legend="right")
p1
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(Matrix)
library(lme4)
library(MASS)
library(pROC)
source("./sim_functions.R")
path = paste0("./nic_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
source("./sim_conditions.R")
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
results_list = list()
res <- generate_data(sim_condition$n_cluster,
sim_condition$n_obs_per_cluster,
sim_condition$n_ttl_betas,
sim_condition$fix_rdm_ratio,
sim_condition$sigma_fix,
sim_condition$sigma_rdm_fix_ratio)
# ground truth mixed effect model
m0 <- fit_glmer(y = res$y,
c = res$c,
data = res$data)
# lr model evaluation matrices
m1 <- eval_glm(y = res$y,
c = res$c,
data = res$data)
stopifnot(!is.na(m1$aic))
# measure bias
fix_effect_betas <- c(grep("^beta_fix_itc$", colnames(res$betas), value = TRUE),
grep("^beta_fix\\d+$", colnames(res$betas), value = TRUE),
grep("^beta_fix_rdm\\d+$", colnames(res$betas), value = TRUE) )
fix_effect_betas <- unique(res$betas[,fix_effect_betas])
fix_effect_betas
summary(m0)
coef(summary(m0))
fix_effect_betas
coef(summary(m0))[,"Estimate"] - fix_effect_betas
abs(coef(summary(m0))[,"Estimate"] - fix_effect_betas)
coef(summary(m0))[,"Std. Error"]
abs(coef(summary(m0))[,"Estimate"] - fix_effect_betas)/coef(summary(m0))[,"Std. Error"]
fix_effect_betas <- c(grep("^beta_fix_itc$", colnames(res$betas), value = TRUE),
grep("^beta_fix\\d+$", colnames(res$betas), value = TRUE),
grep("^beta_fix_rdm\\d+$", colnames(res$betas), value = TRUE) )
fix_effect_betas <- unique(res$betas[,fix_effect_betas])
mean(abs(coef(summary(m0))[,"Estimate"] - fix_effect_betas)/coef(summary(m0))[,"Std. Error"])
NIC(m1)
m1
View(vcov.robust)
y = res$y
c = res$c
data = res$data
df_mdl <- as.data.frame(data)
df_mdl$y <- y
df_mdl$c <- as.factor(c)
fix_vars <- grep("^fix\\d+$", colnames(data), value = TRUE)
rdm_vars <- grep("^rdm\\d+$", colnames(data), value = TRUE)
fml <- formula(paste0("y~", paste0(c(fix_vars, rdm_vars),collapse = "+")))
mdl <- glm(fml, data = df_mdl, family = "binomial")
mdl$c <- c
# information criteria
deviance <- NIC(mdl)$dev
nic <- NIC(mdl)$nic
aic <- NIC(mdl)$aic
bic <- BIC(mdl)
NIC(mdl)
vcov.robust(mdl, cluster = c)
eval_glm <- function(y, c, data){
df_mdl <- as.data.frame(data)
df_mdl$y <- y
df_mdl$c <- as.factor(c)
fix_vars <- grep("^fix\\d+$", colnames(data), value = TRUE)
rdm_vars <- grep("^rdm\\d+$", colnames(data), value = TRUE)
fml <- formula(paste0("y~", paste0(c(fix_vars, rdm_vars),collapse = "+")))
mdl <- glm(fml, data = df_mdl, family = "binomial")
mdl$c <- c
# information criteria
deviance <- NIC(mdl)$dev
nic <- NIC(mdl)$nic
aic <- NIC(mdl)$aic
bic <- BIC(mdl)
vcov <- vcov.robust(mdl, cluster = c)$vcov
# loo auc and loo deviance
y_prob <- c()
y_true <- c()
for (f_sub in unique(df_mdl$c)){
mdl_sub <- glm(fml, family = "binomial", data = df_mdl[!df_mdl$c==f_sub,])
y_prob <- c(y_prob, predict(mdl_sub, type = "response",
newdata = df_mdl[df_mdl$c==f_sub,]))
y_true <- c(y_true, df_mdl[df_mdl$c==f_sub,"y"])
}
looAUC <- as.numeric(pROC::auc(pROC::roc(response = y_true, predictor = y_prob)))
looDeviance <- -2*sum(y_true * log(y_prob) + (1 - y_true) * log(1 - y_prob), na.rm = TRUE)
return(list("mdl"=mdl,
"aic"=aic,
"nic"=nic,
"bic"=bic,
"deviance"=deviance,
"looAUC" = looAUC,
"looDeviance" = looDeviance,
"vcov" = vcov))
}
# lr model evaluation matrices
m1 <- eval_glm(y = res$y,
c = res$c,
data = res$data)
m1$vcov
standard_errors <- sqrt(diag(m1$vcov))
standard_errors
coef(summary(m0))[,"Std. Error"]
se_ratio1 <- mean(abs(coef(m1$mdl) - fix_effect_betas)/sqrt(diag(m1$vcov)))
se_ratio1
se_ratio0
se_ratio0 <- mean(abs(coef(summary(m0))[,"Estimate"] - fix_effect_betas)/coef(summary(m0))[,"Std. Error"])
se_ratio0
source("./sim_functions.R")
path = paste0("./nic_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
source("./sim_conditions.R")
sim_condition = simulation_conditions[which(simulation_conditions$id==100),]
results_list = list()
for(i in 1:sim_condition$iter){
tryCatch({
res <- generate_data(sim_condition$n_cluster,
sim_condition$n_obs_per_cluster,
sim_condition$n_ttl_betas,
sim_condition$fix_rdm_ratio,
sim_condition$sigma_fix,
sim_condition$sigma_rdm_fix_ratio)
# ground truth mixed effect model
m0 <- fit_glmer(y = res$y,
c = res$c,
data = res$data)
# lr model evaluation matrices
m1 <- eval_glm(y = res$y,
c = res$c,
data = res$data)
stopifnot(!is.na(m1$aic))
# measure bias
bias <- calculate_bias(res, m0, m1)
# measure se estimate
se_ratio <- calculate_se_accuracy(res, m0, m1)
results_list[[i]] = list(id = sim_condition$id,
iter = i,
bias0 = bias$bias0,
bias1 = bias$bias1,
se_ratio0 = se_ratio$se_ratio0,
se_ratio1 = se_ratio$se_ratio1,
aic = m1$aic,
bic = m1$bic,
nic = m1$nic,
dev = m1$deviance,
looauc = m1$looAUC,
loodev = m1$looDeviance)
}, error = function(e){
print(e)
print(paste0("skip iteration ",i))
})
}
