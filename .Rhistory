geom_point(data = best_df, aes(x = best_size, y = best_score, color=score), size = 1.5)+
# scale_y_continuous(labels = scales::scientific_format()) +
scale_y_continuous(
limits = function(y) { c(min(y)-0.01*(max(y)-min(y)), max(y)+0.1*(max(y)-min(y))) },
breaks = function(y) { seq(from = min(y), to = max(y), length.out = 5) },
labels = function(y) sprintf("%.2f", y / 1000) ) +
labs(title = "combined",
subtitle = paste0("top ", 2*topn),
x = "Model Size",
y = "Value (e+03)",
color = "Criterion") +
theme(text = element_text(face = "bold"),
plot.title = element_text(size=16, face="bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
legend.title = element_text(size=12),
legend.text = element_text(size=10))
# ---- loo subset 100 ----
topn=500
df_sub <- df_mdl%>%
group_by(Event, VitalID) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
group_by(Event) %>%
slice_max(n, n = topn)
df_sub <- df_mdl[which(df_mdl$VitalID %in%df_sub$VitalID), ]
rm(fwd)
fwd <- modified_stepwise_glm_parallel(df = df_sub,
y = y_col,
x = x_cols,
c = c_col,
maxstep = length(x_cols),
eval_ls=c("Deviance", "AIC", "BIC", "NIC", "cvpred", "cvDeviance"),
eval_by="cvDeviance",
nfold = 50,
family = "binomial",
forward = T,
free_cores = 2)
res_df <- format_forward(fwd)
res_df_long <- res_df %>%
dplyr::select(-cvpred) %>%
pivot_longer(
cols = c(nic, aic, bic, dev, cvdev),  # Specify columns to lengthen
names_to = "score",  # New column for the names
values_to = "value"  # New column for the values
)
res_df_long$score <- factor(res_df_long$score, levels=c("cvdev","cvpred", "nic","bic","aic","dev"))
levels(res_df_long$score) <- c("cvDeviance", "cvAUC", "rNIC","BIC","AIC", "Deviance")
best_df <- data.frame()
for(score in c("cvdev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df$score <- factor(best_df$score, levels=c("cvdev","cvpred", "nic","bic","aic","dev"))
levels(best_df$score) <- c("cvDeviance", "cvAUC", "rNIC","BIC","AIC", "Deviance")
ggplot(res_df_long, aes(x = model_size, y = value)) +
# geom_point(data = res_df_long[which(res_df_long$score=="cvDeviance"),], size = 2) +
geom_line(aes(group = score, color = score)) +
geom_text(data = res_df_long[which(res_df_long$score=="cvDeviance"),], aes(label=x_picked), size = 3, hjust = -0.15, angle = 90) +
scale_color_manual(values = c("rNIC" = "red", "AIC" = "blue", "BIC" = "darkorange", "cvDeviance" = "black", "Deviance" = "gray")) +
theme_minimal() +
geom_errorbar(data = best_df, aes(x = best_size, xmin=best_size_1se_min, xmax=best_size_1se_max, y = best_score, color=score), width=1)+
geom_point(data = best_df, aes(x = best_size, y = best_score, color=score), size = 1.5)+
# scale_y_continuous(labels = scales::scientific_format()) +
scale_y_continuous(
limits = function(y) { c(min(y)-0.01*(max(y)-min(y)), max(y)+0.1*(max(y)-min(y))) },
breaks = function(y) { seq(from = min(y), to = max(y), length.out = 5) },
labels = function(y) sprintf("%.2f", y / 1000) ) +
labs(title = "combined",
subtitle = paste0("top ", 2*topn),
x = "Model Size",
y = "Value (e+03)",
color = "Criterion") +
theme(text = element_text(face = "bold"),
plot.title = element_text(size=16, face="bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
legend.title = element_text(size=12),
legend.text = element_text(size=10))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
source("./model_selection_stat.R")
if(cluster_size == 150){
library(grid)
p_model_select <- annotate_figure(p_model_select, top = text_grob("Model Selection Process", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "B.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Error in 100 iterations", size = 18, face = "bold", hjust = -0.15,x=0),#text_grob("Strong clustering condition", size = 18, face = "bold"),
fig.lab = "A.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Model Selection Accuracy (Strong Clustering Condition)", size = 20, face = "bold"))
}else{
p_model_select <- annotate_figure(p_model_select, top = text_grob("Model Selection Process", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "B.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Error in 100 iterations", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "A.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Model Selection Accuracy (Weak Clustering Condition)", size = 20, face = "bold"))
}
f <- paste0("./res/model_select_example_",model_size,"_",cluster_size,en,".png")
p_model_select %>% ggsave(filename=f, width = 10, height = 10, bg="white")
f <- paste0("./res/model_select_error_",model_size,"_",cluster_size,en,".png")
p_size %>% ggsave(filename=f, width = 10, height = 5, bg="white")
}
img1 <- image_read(paste0("./res/model_select_example_",model_size,"_150",en,".png"))
img1 <- image_border(img1, "black", "10x10")
img2 <- image_read(paste0("./res/model_select_example_",model_size,"_", weak_cluster_size, en,".png"))
img2 <- image_border(img2, "black", "10x10")
combined_lower <- image_append(c(img1, img2), stack = FALSE)
img1 <- image_read(paste0("./res/model_select_error_",model_size,"_150",en,".png"))
img1 <- image_border(img1, "black", "10x10")
img2 <- image_read(paste0("./res/model_select_error_",model_size,"_",weak_cluster_size,en,".png"))
img2 <- image_border(img2, "black", "10x10")
combined_upper <- image_append(c(img1, img2), stack = FALSE)
combined_image <- image_append(c(combined_upper, combined_lower), stack = T)
image_write(combined_image, paste0("./res/model_select_full.png"))
# split vertically
img1 <- image_read(paste0("./res/model_select_error_",model_size,"_150",en,".png"))
img2 <- image_read(paste0("./res/model_select_example_",model_size,"_150",en,".png"))
combined_image <- image_append(c(img1, img2), stack = T)
image_write(combined_image, paste0("./res/model_select_strong.png"))
img1 <- image_read(paste0("./res/model_select_error_",model_size,"_",weak_cluster_size,en,".png"))
img2 <- image_read(paste0("./res/model_select_example_",model_size,"_",weak_cluster_size,en,".png"))
combined_image <- image_append(c(img1, img2), stack = T)
image_write(combined_image, paste0("./res/model_select_weak.png"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "output_run_lr_5days_2024-04-26 09_26_53.793405.RDS"
lm_output_fname <- "output_run_lm_2days_2024-04-26 09_26_50.318184.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions.R")
res_df <- merge(output, simulation_conditions, by="id", all.x=T)
res_df$nic_diff <- abs(res_df$nic1 - res_df$loodev1)
res_df$aic_diff <- abs(res_df$aic1 - res_df$loodev1)
res_df$bic_diff <- abs(res_df$bic1 - res_df$loodev1)
lr_res_df_name <- gsub(".RDS",".csv",lr_output_fname)
lm_res_df_name <- gsub(".RDS",".csv",lm_output_fname)
# if(!file.exists(paste0("./res/", lr_res_df_name))) write.csv(res_df,paste0("./res/", lr_res_df_name),row.names = F)
# if(!file.exists(paste0("./res/", lm_res_df_name))) write.csv(res_df,paste0("./res/", lm_res_df_name),row.names = F)
agg_df <- res_df %>%
group_by(id) %>%
summarise(niter = n(),
bias0 = median(bias0), bias0_se = sd(bias0)/sqrt(niter),
bias1 = median(bias1), bias1_se = sd(bias1)/sqrt(niter),
se_ratio0 = median(se_ratio0), se_ratio0_se = sd(se_ratio0)/sqrt(niter),
se_ratio1 = median(se_ratio1), se_ratio1_se = sd(se_ratio1)/sqrt(niter),
nic_diff = median(nic_diff), nic_diff_se = sd(nic_diff)/sqrt(niter),
aic_diff = median(aic_diff), aic_diff_se = sd(aic_diff)/sqrt(niter),
bic_diff = median(bic_diff), bic_diff_se = sd(bic_diff)/sqrt(niter),
loopred0 = median(loopred0), loopred0_se = sd(loopred0)/sqrt(niter),
loopred1 = median(loopred1), loopred1_se = sd(loopred1)/sqrt(niter),
loodev0 = median(loodev0), loodev0_se = sd(loodev0)/sqrt(niter),
loodev1 = median(loodev1), loodev1_se = sd(loodev1)/sqrt(niter)
)
summa <- function(df){
for(cl in c("nic_diff", "aic_diff", "bic_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.25, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.75, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./fig_sim_conditions.R")
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(333)
library(dplyr)
library(tidyr)
library(pROC)
library(foreach)
library(doParallel)
library(ggplot2)
for(u in c("nic", "ass", "stp", "lss", "do")){
path = paste0("../../nic_simulation/utils/",u,"_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
}
# ---- load data ----
library(readxl)
data <- read_excel("./data/PAS Challenge Model Data.xlsx")
data_mdl <- assign.dict(data, get.dict(data))
data <- read_excel("./data/PAS Challenge Demographic Data.xlsx")
data_demo <- assign.dict(data, get.dict(data))
# data_demo <- data_demo[,setdiff(colnames(data_demo), c("Apgar5", "Apgar1"))]
data <- read_excel("./data/PAS Challenge Cross-Validation Folds.xlsx")
data_cv <- assign.dict(data, get.dict(data))
data <- read_excel("./data/PAS Challenge Outcome Data.xlsx")
data_outc <- assign.dict(data, get.dict(data))
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(333)
library(dplyr)
library(tidyr)
library(pROC)
library(foreach)
library(doParallel)
library(ggplot2)
for(u in c("nic", "ass", "stp", "lss", "do")){
path = paste0("../../nic_simulation/utils/",u,"_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
}
# ---- load data ----
library(readxl)
data <- read_excel("./data/PAS Challenge Model Data.xlsx")
data_mdl <- assign.dict(data, get.dict(data))
data <- read_excel("./data/PAS Challenge Demographic Data.xlsx")
data_demo <- assign.dict(data, get.dict(data))
# data_demo <- data_demo[,setdiff(colnames(data_demo), c("Apgar5", "Apgar1"))]
data <- read_excel("./data/PAS Challenge Cross-Validation Folds.xlsx")
data_cv <- assign.dict(data, get.dict(data))
data <- read_excel("./data/PAS Challenge Outcome Data.xlsx")
data_outc <- assign.dict(data, get.dict(data))
source("./stepwise_vital.R")
source("./stepwise_combined.R")
source("./stepwise_demo.R")
p <- list()
for(mn in c("clustered_combined", "unclustered_demo")){ # , "clustered_vital"
res_df <- readRDS(paste0("./res/fwd_",mn,".RDS"))
# # rescale all the criteria between 0-1
# for(cr in c("cvdev", "cvpred","nic","bic","aic","dev")){
#   if(cr == "cvpred") res_df[[cr]] <- -res_df[[cr]]
#   res_df[[cr]] <- (res_df[[cr]] - min(res_df[[cr]],na.rm=T))/(max(res_df[[cr]],na.rm = T) - min(res_df[[cr]],na.rm=T))
# }
# res_df_long <- res_df %>%
#   pivot_longer(
#     cols = c(nic, aic, bic, dev, cvdev, cvpred),  # Specify columns to lengthen
#     names_to = "score",  # New column for the names
#     values_to = "value"  # New column for the values
#   )
# res_df_long$score <- factor(res_df_long$score, levels=c("cvdev","cvpred", "nic", "bic", "aic", "dev"))
# levels(res_df_long$score) <- c("cvDeviance", "cvAUC", "NICc", "BIC", "AIC", "Deviance")
# p[[mn]] <- ggplot(res_df_long, aes(x = model_size, y = value, group = score, color = score)) +
#   geom_line() +
#   scale_color_manual(values = c("NICc" = "red", "AIC" = "blue", "BIC" = "orange", "cvDeviance" = "black", "Deviance" = "gray", "cvAUC" = "green")) +
#   theme_minimal() +
#   # scale_y_continuous(labels = scales::scientific_format()) +
#   scale_y_continuous(breaks = function(x) {
#     seq(from = min(x), to = max(x), length.out = 5)
#   }) +
#   labs(subtitle= ifelse(mn=="clustered_combined", "Demographic + Vital signs (clustered)", "Demographic (unclustered)" ),
#        x = "Model Size",
#        y = "Value (e+03)",
#        color = "Criterion") +
#   theme(text = element_text(face = "bold"),
#         plot.subtitle = element_text(size=12, face="bold"),
#         axis.title = element_text(size=12),
#         axis.text = element_text(size=10),
#         legend.title = element_text(size=12),
#         legend.text = element_text(size=10))
res_df_long <- res_df %>%
dplyr::select(-cvpred) %>%
pivot_longer(
cols = c(nic, aic, bic, dev, cvdev),  # Specify columns to lengthen
names_to = "score",  # New column for the names
values_to = "value"  # New column for the values
)
res_df_long$score <- factor(res_df_long$score, levels=c("cvdev","cvpred", "nic","bic","aic","dev"))
levels(res_df_long$score) <- c("cvDeviance", "cvAUC", "NICc","BIC","AIC", "Deviance")
best_df <- data.frame()
for(score in c("cvdev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df$score <- factor(best_df$score, levels=c("cvdev","cvpred", "nic","bic","aic","dev"))
levels(best_df$score) <- c("cvDeviance", "cvAUC", "NICc","BIC","AIC", "Deviance")
if(mn=="clustered_combined"){
title = "Clustered"
subtitle = "Demographic + Vital signs"
}
if(mn=="clustered_vital"){
title = "Clustered"
subtitle = "Vital signs"
}
if(mn=="unclustered_demo"){
title = "Non-clustered"
subtitle = "Demographic"
}
p[[mn]] <- ggplot(res_df_long, aes(x = model_size, y = value)) +
# geom_point(data = res_df_long[which(res_df_long$score=="cvDeviance"),], size = 2) +
geom_line(aes(group = score, color = score)) +
geom_text(data = res_df_long[which(res_df_long$score=="cvDeviance"),], aes(label=x_picked), size = 3, hjust = -0.15, angle = 90) +
scale_color_manual(values = c("NICc" = "red", "AIC" = "blue", "BIC" = "darkorange", "cvDeviance" = "black", "Deviance" = "gray")) +
theme_minimal() +
geom_errorbar(data = best_df, aes(x = best_size, xmin=best_size_1se_min, xmax=best_size_1se_max, y = best_score, color=score), width=1)+
geom_point(data = best_df, aes(x = best_size, y = best_score, color=score), size = 1.5)+
# scale_y_continuous(labels = scales::scientific_format()) +
scale_y_continuous(
limits = function(y) { c(min(y)-0.01*(max(y)-min(y)), max(y)+0.1*(max(y)-min(y))) },
breaks = function(y) { seq(from = min(y), to = max(y), length.out = 5) },
labels = function(y) sprintf("%.2f", y / 1000) ) +
labs(title = title,
subtitle = subtitle,
x = "Model Size",
y = "Value (e+03)",
color = "Criterion") +
theme(text = element_text(face = "bold"),
plot.title = element_text(size=16, face="bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
legend.title = element_text(size=12),
legend.text = element_text(size=10))
}
p_case <- ggpubr::ggarrange(plotlist = p, common.legend = T, legend = "bottom")
p_case %>% ggsave(filename="./res/fig_case.png", width = 10, height = 6, bg="white")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "output_run_lr_5days_2024-04-26 09_26_53.793405.RDS"
lm_output_fname <- "output_run_lm_2days_2024-04-26 09_26_50.318184.RDS"
agg_df_ls <- list()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "output_run_lr_5days_2024-04-26 09_26_53.793405.RDS"
lm_output_fname <- "output_run_lm_2days_2024-04-26 09_26_50.318184.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions.R")
res_df <- merge(output, simulation_conditions, by="id", all.x=T)
res_df$nic_diff <- abs(res_df$nic1 - res_df$loodev1)
res_df$aic_diff <- abs(res_df$aic1 - res_df$loodev1)
res_df$bic_diff <- abs(res_df$bic1 - res_df$loodev1)
lr_res_df_name <- gsub(".RDS",".csv",lr_output_fname)
lm_res_df_name <- gsub(".RDS",".csv",lm_output_fname)
# if(!file.exists(paste0("./res/", lr_res_df_name))) write.csv(res_df,paste0("./res/", lr_res_df_name),row.names = F)
# if(!file.exists(paste0("./res/", lm_res_df_name))) write.csv(res_df,paste0("./res/", lm_res_df_name),row.names = F)
agg_df <- res_df %>%
group_by(id) %>%
summarise(niter = n(),
bias0 = median(bias0), bias0_se = sd(bias0)/sqrt(niter),
bias1 = median(bias1), bias1_se = sd(bias1)/sqrt(niter),
se_ratio0 = median(se_ratio0), se_ratio0_se = sd(se_ratio0)/sqrt(niter),
se_ratio1 = median(se_ratio1), se_ratio1_se = sd(se_ratio1)/sqrt(niter),
nic_diff = median(nic_diff), nic_diff_se = sd(nic_diff)/sqrt(niter),
aic_diff = median(aic_diff), aic_diff_se = sd(aic_diff)/sqrt(niter),
bic_diff = median(bic_diff), bic_diff_se = sd(bic_diff)/sqrt(niter),
loopred0 = median(loopred0), loopred0_se = sd(loopred0)/sqrt(niter),
loopred1 = median(loopred1), loopred1_se = sd(loopred1)/sqrt(niter),
loodev0 = median(loodev0), loodev0_se = sd(loodev0)/sqrt(niter),
loodev1 = median(loodev1), loodev1_se = sd(loodev1)/sqrt(niter)
)
summa <- function(df){
for(cl in c("nic_diff", "aic_diff", "bic_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.25, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.75, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
plot_ls <- list()
r <- rev(c(0.5, 1, 5, 10))[4]
na <- c(0,1)[1]
for(rn in c("lm","lr")){
agg_df <- agg_df_ls[[rn]]
# # use mean and se
# plot_df <- NULL
# for(en in c("_mean","_se")){
#   tmpdf <- pivot_longer(agg_df[,c("id", paste0(c("aic_diff", "bic_diff", "nic_diff"),en))],
#                         cols = ends_with(en),
#                         names_to = "ic_type",
#                         values_to = paste0("ic_diff",en))
#   tmpdf$ic_type <- gsub(en,"", tmpdf$ic_type)
#   if(is.null(plot_df)){plot_df <- tmpdf}
#   else{
#     plot_df <- merge(plot_df, tmpdf)
#   }
# }
# plot_df$ic_diff <-  plot_df$ic_diff_mean
# plot_df$ic_diff_l <- plot_df$ic_diff - plot_df$ic_diff_se
# plot_df$ic_diff_u <- plot_df$ic_diff + plot_df$ic_diff_se
# use IQR
plot_df <- NULL
for(en in c("_median","_q25", "_q75")){
tmpdf <- pivot_longer(agg_df[,c("id", paste0(c("aic_diff", "bic_diff", "nic_diff"),en))],
cols = ends_with(en),
names_to = "ic_type",
values_to = paste0("ic_diff",en))
tmpdf$ic_type <- gsub(en,"", tmpdf$ic_type)
if(is.null(plot_df)){plot_df <- tmpdf}
else{
plot_df <- merge(plot_df, tmpdf)
}
}
plot_df$ic_diff <-  plot_df$ic_diff_median
plot_df$ic_diff_l <- plot_df$ic_diff_q25
plot_df$ic_diff_u <- plot_df$ic_diff_q75
plot_df <- merge(plot_df,simulation_conditions, by="id", all.x=T) %>% as.data.frame()
plot_df <- plot_df %>% filter(sigma_rdm_fix_ratio == r, na_rate == na) %>% as.data.frame()
plot_df$n_obs_per_cluster <- paste0(plot_df$n_obs_per_cluster, " obs/cluster")
plot_df$n_obs_per_cluster <- factor(plot_df$n_obs_per_cluster, levels=c("5 obs/cluster",
"10 obs/cluster",
"50 obs/cluster",
"100 obs/cluster",
"150 obs/cluster") )
plot_df$ic_type <- stringr::str_to_upper(gsub("_diff","",plot_df$ic_type))
plot_df$ic_type <- factor(plot_df$ic_type, levels=c("NIC","AIC","BIC"))
levels(plot_df$ic_type) <- c("NICc","AIC","BIC")
plot_df$ar1_phi <- paste0("AR1(",plot_df$ar1_phi,")")
plot_df$ar1_phi <- factor(plot_df$ar1_phi, levels = c("AR1(0)", "AR1(0.4)", "AR1(0.8)"))
# plot_df$na_rate_factor <- factor(plot_df$na_rate, levels = c(0, 1))
# levels(plot_df$na_rate_factor) <- c("Balanced", "Unbalanced")
plot_ls[[rn]] <- ggplot(data = plot_df, aes(x = n_ttl_betas, y = ic_diff, color = ic_type)) +
geom_point(size=2) +
geom_line() +
# geom_line(mapping = aes(linetype=na_rate_factor))+
geom_errorbar(aes(ymin = ic_diff_l, ymax = ic_diff_u),width=0.5) +
scale_linetype_manual(values = c("solid", "dashed", "dotdash", "dotted")) +
geom_hline(aes(yintercept=0)) +
scale_x_continuous(limits = c(min(plot_df$n_ttl_betas), max(plot_df$n_ttl_betas)), breaks = seq(min(plot_df$n_ttl_betas), max(plot_df$n_ttl_betas), 1)) +
coord_trans(y = "sqrt") +
facet_wrap(~ar1_phi + n_obs_per_cluster, ncol=5, nrow=3, scales="free_x") +
labs(subtitle = ifelse(rn=="lr", "Binomial", "Gaussian"),
x = "Generating Model Size",
y = "Error = |IC - looDeviance|",
color = "Criterion",
linetype="Cluster") +
theme_bw()+
scale_color_manual(values = c("NICc" = "red", "AIC" = "blue", "BIC" = "darkorange", "looDeviance" = "black", "Deviance" = "gray")) +
theme(text = element_text(face = "bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
legend.title = element_text(size=12),
legend.text = element_text(size=10))
}
p <- ggarrange(plotlist = plot_ls, nrow=2,ncol=1, common.legend = T,legend = "right")
p <- annotate_figure(p, top = text_grob("Error in approximating out-of-cluster performance", size = 14, face = "bold"))
p
