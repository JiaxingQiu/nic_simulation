res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
# res_df_iter[[sn]]$nicc <- res_df_iter[[sn]]$nic
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
source("./model_selection_stat.R")
if(cluster_size == 150){
library(grid)
p_model_select <- annotate_figure(p_model_select, top = text_grob("Model Selection Process", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "B.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Error in 100 iterations", size = 18, face = "bold", hjust = -0.15,x=0),#text_grob("Strong clustering condition", size = 18, face = "bold"),
fig.lab = "A.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Model Selection Accuracy (150 obs/cluster)", size = 20, face = "bold"))
}else{
p_model_select <- annotate_figure(p_model_select, top = text_grob("Model Selection Process", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "B.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Error in 100 iterations", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "A.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Model Selection Accuracy (5 obs/cluster)", size = 20, face = "bold"))
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_",cluster_size,en,".png")
p_model_select %>% ggsave(filename=f, width = 11, height = 10, bg="white")
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_",cluster_size,en,".png")
p_size %>% ggsave(filename=f, width = 11, height = 5, bg="white")
}
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_150",en,".png"))
img1 <- image_border(img1, "black", "10x10")
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_", weak_cluster_size, en,".png"))
img2 <- image_border(img2, "black", "10x10")
combined_lower <- image_append(c(img1, img2), stack = FALSE)
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_150",en,".png"))
img1 <- image_border(img1, "black", "10x10")
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_",weak_cluster_size,en,".png"))
img2 <- image_border(img2, "black", "10x10")
combined_upper <- image_append(c(img1, img2), stack = FALSE)
combined_image <- image_append(c(combined_upper, combined_lower), stack = T)
image_write(combined_image, paste0("./res/",sigma_rdm_fix_ratio,"/model_select_full.png"))
# split vertically
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_150",en,".png"))
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_150",en,".png"))
combined_image <- image_append(c(img1, img2), stack = T)
image_write(combined_image, paste0("./res/",sigma_rdm_fix_ratio,"/model_select_strong.png"))
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_",weak_cluster_size,en,".png"))
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_",weak_cluster_size,en,".png"))
combined_image <- image_append(c(img1, img2), stack = T)
image_write(combined_image, paste0("./res/",sigma_rdm_fix_ratio,"/model_select_weak.png"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_spec.R")
if(cluster_size == 150){
p_spec <- annotate_figure(p_spec, top = text_grob("Model Specification (150 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Model Specification (150 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
}else{
p_spec <- annotate_figure(p_spec, top = text_grob("Model Specification (5 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Model Specification (5 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_misspecification_",model_size,"_",cluster_size,en,".png")
p_spec %>% ggsave(filename=f, width = 15, height = 6 , bg="white")
p_spec_box %>% ggsave(filename=gsub(".png","_box.png",f), width = 10, height = 5, bg="white")
}
p_spec_box %>% ggsave(filename=gsub(".png","_box.png",f), width = 8, height = 5, bg="white")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_spec.R")
if(cluster_size == 150){
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Model Specification (150 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Model Specification (150 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
}else{
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Model Specification (5 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Model Specification (5 obs/cluster)", size = 18, face = "bold", hjust=0,x=0) )
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_misspecification_",model_size,"_",cluster_size,en,".png")
p_spec %>% ggsave(filename=f, width = 15, height = 6 , bg="white")
p_spec_box %>% ggsave(filename=gsub(".png","_box.png",f), width = 8, height = 5, bg="white")
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_spec.R")
if(cluster_size == 150){
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Variable Specification (150 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Variable Specification (150 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
}else{
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Variable Specification (5 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Variable Specification (5 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_misspecification_",model_size,"_",cluster_size,en,".png")
p_spec %>% ggsave(filename=f, width = 15, height = 6 , bg="white")
p_spec_box %>% ggsave(filename=gsub(".png","_box.png",f), width = 8, height = 5, bg="white")
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
cluster_size = 150
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
# res_df_iter[[sn]]$nicc <- res_df_iter[[sn]]$nic
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
sn = "lm"
p_agg <- list()
pie <- list()
pl <- list()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
# res_df <- run_wrapper_lr(sim_condition)
res_df <- res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i),]
res_df_long <- res_df %>%
pivot_longer(
cols = c(nic, aic, nicc, bic, dev, loodev),  # Specify columns to lengthen
names_to = "score",  # New column for the names
values_to = "value"  # New column for the values
)
best_df <- best_df_iter[[sn]][which(best_df_iter[[sn]]$i==i),]
# ymin <- res_df_long$value[which(res_df_long$value == min(res_df_long$value[res_df_long$score=="dev"]) )][1]
# ymax <- res_df_long$value[res_df_long$score=="loodev"&res_df_long$model_size==1]
res_df_long$score <- factor(res_df_long$score, levels=c("loodev","nicc", "nic","aic","bic","dev"))
levels(res_df_long$score) <- c("looDeviance\n(baseline)","NICc", "NIC", "AIC", "BIC", "Deviance")
best_df$score <- factor(best_df$score, levels=c("loodev","nicc", "nic","aic","bic","dev"))
levels(best_df$score) <- c("looDeviance\n(baseline)","NICc", "NIC", "AIC", "BIC", "Deviance")
ymax <- res_df_long$value[which(res_df_long$score=="looDeviance\n(baseline)" & res_df_long$model_size==1)] + 100
ymin <- res_df_long$value[which(res_df_long$score=="NIC" & res_df_long$model_size==25)] - 50
pl[[i]] <- ggplot(res_df_long, aes(x = model_size, y = value, group = score, color = score)) +
geom_line() +
#geom_vline(xintercept = 5, color = "grey") +
scale_color_manual(values = c("NICc" = "red", "AIC" = "blue","NIC" = "lightblue3", "BIC" = "orange", "looDeviance\n(baseline)" = "black", "Deviance" = "gray")) +
theme_minimal() +
# scale_y_continuous(labels = scales::scientific_format()) +
scale_y_continuous(
limits = c(ymin,ymax),
breaks = function(x) {
seq(from = min(x), to = max(x), length.out = 5)
},labels = function(y) sprintf("%.2f", y / 1000) ) +
geom_errorbar(data = best_df, aes(x = best_size, xmin=best_size_1se_min, xmax=best_size_1se_max, y = best_score, color=score))+
geom_point(data = best_df, aes(x = best_size, y = best_score, color=score), size = 1.5)+
labs(title = paste0("iter = ",i), x = "Model Size", y = "Value", color = "Criterion") +
theme(text = element_text(face = "bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
legend.title = element_text(size=12),
legend.text = element_text(size=10))
if(detect_mal(res_df, sim_condition)){
print(i)
}
}
ggarrange(plotlist = pl[1:20],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[1:20],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[21:40],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[41:60],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[61:80],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[81:100],nrow=4, ncol=5,common.legend = T, legend = "right")
sn = "lr"
pl <- list()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
# res_df <- run_wrapper_lr(sim_condition)
res_df <- res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i),]
res_df_long <- res_df %>%
pivot_longer(
cols = c(nic, aic, nicc, bic, dev, loodev),  # Specify columns to lengthen
names_to = "score",  # New column for the names
values_to = "value"  # New column for the values
)
best_df <- best_df_iter[[sn]][which(best_df_iter[[sn]]$i==i),]
# ymin <- res_df_long$value[which(res_df_long$value == min(res_df_long$value[res_df_long$score=="dev"]) )][1]
# ymax <- res_df_long$value[res_df_long$score=="loodev"&res_df_long$model_size==1]
res_df_long$score <- factor(res_df_long$score, levels=c("loodev","nicc", "nic","aic","bic","dev"))
levels(res_df_long$score) <- c("looDeviance\n(baseline)","NICc", "NIC", "AIC", "BIC", "Deviance")
best_df$score <- factor(best_df$score, levels=c("loodev","nicc", "nic","aic","bic","dev"))
levels(best_df$score) <- c("looDeviance\n(baseline)","NICc", "NIC", "AIC", "BIC", "Deviance")
ymax <- res_df_long$value[which(res_df_long$score=="looDeviance\n(baseline)" & res_df_long$model_size==1)] + 100
ymin <- res_df_long$value[which(res_df_long$score=="NIC" & res_df_long$model_size==25)] - 50
pl[[i]] <- ggplot(res_df_long, aes(x = model_size, y = value, group = score, color = score)) +
geom_line() +
#geom_vline(xintercept = 5, color = "grey") +
scale_color_manual(values = c("NICc" = "red", "AIC" = "blue","NIC" = "lightblue3", "BIC" = "orange", "looDeviance\n(baseline)" = "black", "Deviance" = "gray")) +
theme_minimal() +
# scale_y_continuous(labels = scales::scientific_format()) +
scale_y_continuous(
limits = c(ymin,ymax),
breaks = function(x) {
seq(from = min(x), to = max(x), length.out = 5)
},labels = function(y) sprintf("%.2f", y / 1000) ) +
geom_errorbar(data = best_df, aes(x = best_size, xmin=best_size_1se_min, xmax=best_size_1se_max, y = best_score, color=score))+
geom_point(data = best_df, aes(x = best_size, y = best_score, color=score), size = 1.5)+
labs(title = paste0("iter = ",i), x = "Model Size", y = "Value", color = "Criterion") +
theme(text = element_text(face = "bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.title = element_text(size=12),
axis.text = element_text(size=10),
legend.title = element_text(size=12),
legend.text = element_text(size=10))
if(detect_mal(res_df, sim_condition)){
print(i)
}
}
ggarrange(plotlist = pl[1:20],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[21:40],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[41:60],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[61:80],nrow=4, ncol=5,common.legend = T, legend = "right")
ggarrange(plotlist = pl[81:100],nrow=4, ncol=5,common.legend = T, legend = "right")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
# res_df_iter[[sn]]$nicc <- res_df_iter[[sn]]$nic
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
source("./model_selection_stat.R")
if(cluster_size == 150){
library(grid)
p_model_select <- annotate_figure(p_model_select, top = text_grob("Model Selection Process", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "B.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Error in 100 iterations", size = 18, face = "bold", hjust = -0.15,x=0),#text_grob("Strong clustering condition", size = 18, face = "bold"),
fig.lab = "A.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Model Selection Accuracy (150 obs/cluster)", size = 20, face = "bold"))
}else{
p_model_select <- annotate_figure(p_model_select, top = text_grob("Model Selection Process", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "B.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Error in 100 iterations", size = 18, face = "bold", hjust = -0.15,x=0),
fig.lab = "A.", fig.lab.face = "bold", fig.lab.size = 20)
p_size <- annotate_figure(p_size, top = text_grob("Model Selection Accuracy (5 obs/cluster)", size = 20, face = "bold"))
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_",cluster_size,en,".png")
p_model_select %>% ggsave(filename=f, width = 11, height = 10, bg="white")
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_",cluster_size,en,".png")
p_size %>% ggsave(filename=f, width = 11, height = 5, bg="white")
}
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_150",en,".png"))
img1 <- image_border(img1, "black", "10x10")
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_", weak_cluster_size, en,".png"))
img2 <- image_border(img2, "black", "10x10")
combined_lower <- image_append(c(img1, img2), stack = FALSE)
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_150",en,".png"))
img1 <- image_border(img1, "black", "10x10")
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_",weak_cluster_size,en,".png"))
img2 <- image_border(img2, "black", "10x10")
combined_upper <- image_append(c(img1, img2), stack = FALSE)
combined_image <- image_append(c(combined_upper, combined_lower), stack = T)
image_write(combined_image, paste0("./res/",sigma_rdm_fix_ratio,"/model_select_full.png"))
# split vertically
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_150",en,".png"))
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_150",en,".png"))
combined_image <- image_append(c(img1, img2), stack = T)
image_write(combined_image, paste0("./res/",sigma_rdm_fix_ratio,"/model_select_strong.png"))
img1 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_error_",model_size,"_",weak_cluster_size,en,".png"))
img2 <- image_read(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_example_",model_size,"_",weak_cluster_size,en,".png"))
combined_image <- image_append(c(img1, img2), stack = T)
image_write(combined_image, paste0("./res/",sigma_rdm_fix_ratio,"/model_select_weak.png"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_spec.R")
if(cluster_size == 150){
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Variable Specification (150 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Variable Specification (150 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
}else{
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Variable Specification (5 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Variable Specification (5 obs/cluster)", size = 16, face = "bold", hjust=0,x=0) )
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_misspecification_",model_size,"_",cluster_size,en,".png")
p_spec %>% ggsave(filename=f, width = 15, height = 6 , bg="white")
p_spec_box %>% ggsave(filename=gsub(".png","_box.png",f), width = 8, height = 5, bg="white")
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
weak_cluster_size = 5 #5
sigma_rdm_fix_ratio = 10 #c(0.5,1,5,10)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(magick)
for(cluster_size in c(weak_cluster_size,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/",sigma_rdm_fix_ratio,"/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
# res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.95)] <- quantile(res_df$loodev,0.95)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "nicc", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_spec.R")
if(cluster_size == 150){
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Variable Specification (150 obs/cluster)", size = 16, face = "bold") )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Variable Specification (150 obs/cluster)", size = 16, face = "bold") )
}else{
p_spec <- annotate_figure(p_spec, top = text_grob("Accuracy of Variable Specification (5 obs/cluster)", size = 16, face = "bold") )
p_spec_box <- annotate_figure(p_spec_box, top = text_grob("Accuracy of Variable Specification (5 obs/cluster)", size = 16, face = "bold") )
}
f <- paste0("./res/",sigma_rdm_fix_ratio,"/model_misspecification_",model_size,"_",cluster_size,en,".png")
p_spec %>% ggsave(filename=f, width = 15, height = 6 , bg="white")
p_spec_box %>% ggsave(filename=gsub(".png","_box.png",f), width = 8, height = 5, bg="white")
}
