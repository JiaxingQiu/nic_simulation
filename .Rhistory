}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_N.R")
p_n <- p
p_n <- annotate_figure(p_n, fig.lab = "\nA.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Clustering by number of observations per cluster", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
source("./sim_plot_phi.R")
p_p <- p
p_p <- annotate_figure(p_p, fig.lab = "\nB.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Clustering in predictors\n(by within-cluster autocorrelation)", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
source("./sim_plot_sigma_ratio.R")
p_r <- p
p_r <- annotate_figure(p_r, fig.lab = "\nC.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Clustering in response\n(by strength of random effects)", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
p_bottom <- ggarrange(p_p, p_r, ncol=2, nrow=1, widths = c(3,3) )
p <- ggarrange(p_n, p_bottom, nrow = 2, ncol=1, heights = c(1,1))
# r <- rev(c(0.5, 1, 5, 10))[4]
# na <- c(0,1)[1]
# source("./sim_conditions_plot.R")
p <- annotate_figure(p, top = text_grob("Out-of-cluster Performance Approximation", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/nic_vs_aic.png"), width = 8, height = 9, bg="white")
# special scenario
source("./sim_plot_unbalance.R")
p_na <- annotate_figure(p, fig.lab = "\nA.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Unbalanced cluster sizes", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
# p_na %>% ggsave(filename=paste0("./res/balance_vs_unbalance.png"), width = 7, height = 6, bg="white")
source("./sim_plot_small_cluster.R")
p_sm <- annotate_figure(p, fig.lab = "\nB.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Small sample of clusters", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
p_spec <- ggarrange(p_na, p_sm, ncol=2, nrow=1, widths = c(2.5,3) )
p_spec <- annotate_figure(p_spec, top = text_grob("Out-of-cluster Performance Approximation (special scenarios)", size = 14, face = "bold"))
p_spec %>% ggsave(filename=paste0("./res/special_scenario.png"), width = 11, height = 6, bg="white")
colnames(res_df)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "output_run_lr_5days_2024-06-21 00_20_46.077512.RDS"
lm_output_fname <- "output_run_lm_2days_2024-06-21 00_20_40.358054.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions.R")
res_df <- merge(output, simulation_conditions, by="id", all.x=T)
res_df <- res_df %>% filter(!sigma_rdm_fix_ratio==5) %>%as.data.frame()
if(!"nicc1" %in%colnames(res_df) ){
res_df$nicc1 <- res_df$nic1 # comment out remember
print("error : nic used for nicc ")
}
res_df$nicc_diff <- (res_df$nicc1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)#res_df$loodev1 #abs()
res_df$nic_diff <- (res_df$nic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)#res_df$loodev1 #abs()
res_df$aic_diff <- (res_df$aic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)#res_df$loodev1 #abs()
res_df$bic_diff <- (res_df$bic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)#res_df$loodev1 #abs()
# lr_res_df_name <- gsub(".RDS",".csv",lr_output_fname)
# lm_res_df_name <- gsub(".RDS",".csv",lm_output_fname)
# if(!file.exists(paste0("./res/", lr_res_df_name))) write.csv(res_df,paste0("./res/", lr_res_df_name),row.names = F)
# if(!file.exists(paste0("./res/", lm_res_df_name))) write.csv(res_df,paste0("./res/", lm_res_df_name),row.names = F)
agg_df <- res_df %>%
group_by(id) %>%
summarise(niter = n(),
bias0 = median(bias0), bias0_se = sd(bias0)/sqrt(niter),
bias1 = median(bias1), bias1_se = sd(bias1)/sqrt(niter),
se_ratio0 = median(se_ratio0), se_ratio0_se = sd(se_ratio0)/sqrt(niter),
se_ratio1 = median(se_ratio1), se_ratio1_se = sd(se_ratio1)/sqrt(niter),
nicc_diff = median(nicc_diff), nicc_diff_se = sd(nicc_diff)/sqrt(niter),
nic_diff = median(nic_diff), nic_diff_se = sd(nic_diff)/sqrt(niter),
aic_diff = median(aic_diff), aic_diff_se = sd(aic_diff)/sqrt(niter),
bic_diff = median(bic_diff), bic_diff_se = sd(bic_diff)/sqrt(niter),
loopred0 = median(loopred0), loopred0_se = sd(loopred0)/sqrt(niter),
loopred1 = median(loopred1), loopred1_se = sd(loopred1)/sqrt(niter),
loodev0 = median(loodev0), loodev0_se = sd(loodev0)/sqrt(niter),
loodev1 = median(loodev1), loodev1_se = sd(loodev1)/sqrt(niter)
)
summa <- function(df){
for(cl in c("nicc_diff", "nic_diff", "aic_diff", "bic_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.25, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.75, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_N.R")
p_n <- p
p_n <- annotate_figure(p_n, fig.lab = "\nA.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Clustering by number of observations per cluster", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
source("./sim_plot_phi.R")
p_p <- p
p_p <- annotate_figure(p_p, fig.lab = "\nB.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Clustering in predictors\n(by within-cluster autocorrelation)", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
source("./sim_plot_sigma_ratio.R")
p_r <- p
p_r <- annotate_figure(p_r, fig.lab = "\nC.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Clustering in response\n(by strength of random effects)", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
p_bottom <- ggarrange(p_p, p_r, ncol=2, nrow=1, widths = c(3,3) )
p <- ggarrange(p_n, p_bottom, nrow = 2, ncol=1, heights = c(1,1))
# r <- rev(c(0.5, 1, 5, 10))[4]
# na <- c(0,1)[1]
# source("./sim_conditions_plot.R")
p <- annotate_figure(p, top = text_grob("Out-of-cluster Performance Approximation", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/nic_vs_aic.png"), width = 8, height = 9, bg="white")
# special scenario
source("./sim_plot_unbalance.R")
p_na <- annotate_figure(p, fig.lab = "\nA.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Unbalanced cluster sizes", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
# p_na %>% ggsave(filename=paste0("./res/balance_vs_unbalance.png"), width = 7, height = 6, bg="white")
source("./sim_plot_small_cluster.R")
p_sm <- annotate_figure(p, fig.lab = "\nB.", fig.lab.face = "bold", fig.lab.size = 12,
top = text_grob("\n Small sample of clusters", size = 12, face = "bold", x=0,hjust=0),
left = text_grob("Error", size = 10, face = "bold", rot = 90),
bottom = text_grob("Generating model size", size = 10, face = "bold") )
p_spec <- ggarrange(p_na, p_sm, ncol=2, nrow=1, widths = c(2.5,3) )
p_spec <- annotate_figure(p_spec, top = text_grob("Out-of-cluster Performance Approximation (special scenarios)", size = 14, face = "bold"))
p_spec %>% ggsave(filename=paste0("./res/special_scenario.png"), width = 11, height = 6, bg="white")
knitr::opts_chunk$set(error=FALSE,
collapse = FALSE,
echo = TRUE,
warning = FALSE,
message = FALSE,
results = FALSE,
fig.dim= c(10,5)
)
library(glmmTMB)
library(dplyr)
library(tibble)
library(tidyr)
library(knitr)
library(kableExtra)
set.seed(333)
data <- readRDS("./data/df_mdl_lag5.RDS")
colnames(data) <- gsub("person_lag", "previous_", colnames(data))
colnames(data)[which(colnames(data)=="first_obs")] <- "overnight"
data <- data %>% filter(collect_order<=5, collect_order>=1)
bhvr_urge_pairs <- list("Binge" = list(urge = "Binge_Urge", bhvr = "Binge_Behavior"),
"Exercise" = list(urge = "Compelled_to_Exercise_Urge", bhvr ="Excessive_Exercise_Behavior"),
"Restriction" = list(urge = "Restriction_Urge", bhvr = "Restriction_Behavior"),
"Vomit" = list(urge = "Self_Induced_Vomiting_Urge", bhvr = "Self_Induced_Vomiting_Behavior"),
"Skipped_Meals" = list(urge = "Skipped_Meals_Urge", bhvr = "Skipped_Meals_Behavior"))
coef_all_cond <- list()
coef_all_zero <- list()
gof_mtrc <- list()
outcome = "bvhr"
coef_all_cond[[outcome]] <- list() # initiate for result
coef_all_zero[[outcome]] <- list()
gof_mtrc[[outcome]] <- list()
knitr::opts_chunk$set(error=FALSE,
collapse = FALSE,
echo = TRUE,
warning = FALSE,
message = FALSE,
results = FALSE,
fig.dim= c(10,5)
)
outcome <- "bhvr"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
overnight = "w_o"
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
fe <- paste0("previous_behavior + previous_urge ", ifelse(outcome == "bhvr", "+ current_urge", ""))
me <- paste0("(1 + ", fe, "| Participant_ID)")
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
mdl <- glmmTMB(fml,
data = df_mdl,
#ziformula = ~.,  # This specifies the zero-inflation part of the model
family = gaussian)
performance::model_performance(mdl)
fml
# lme4
library(lme4)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
# Evaluate model performance using the performance package
performance::model_performance(mdl)
summary(mdl)
?lmer
r_squared <- r.squaredGLMM(mdl)
library(MuMIn)
library(MuMIn)
library(MuMIn)
r_squared <- r.squaredGLMM(mdl)
r_squared
performance::model_performance(mdl)
# glmmTMB
mdl0 <- glmmTMB(fml,
data = df_mdl,
#ziformula = ~.,  # This specifies the zero-inflation part of the model
family = gaussian)
# glmmTMB
mdl0 <- glmmTMB(fml,
data = df_mdl,
#ziformula = ~.,  # This specifies the zero-inflation part of the model
family = gaussian)
performance::model_performance(mdl0)
r_squared
mdl0
mdl
summary(mdl)
as.data.frame(summary(mdl)$coefficients$cond) %>%
rownames_to_column(var = "varname") %>%
select(varname, Estimate, `Pr(>|z|)`) %>%
rename(coef = Estimate, p_value = `Pr(>|z|)`) %>%
mutate(coef = round(coef,3),
p_value = round(p_value, 3),
p_value = case_when(
p_value < 0.01 ~ "(p<0.01)",
p_value < 0.05 ~ "(p<0.05)",
TRUE ~ "        "
))
coef_cond <- as.data.frame(summary(mdl0)$coefficients$cond) %>%
rownames_to_column(var = "varname") %>%
select(varname, Estimate, `Pr(>|z|)`) %>%
rename(coef = Estimate, p_value = `Pr(>|z|)`) %>%
mutate(coef = round(coef,3),
p_value = round(p_value, 3),
p_value = case_when(
p_value < 0.01 ~ "(p<0.01)",
p_value < 0.05 ~ "(p<0.05)",
TRUE ~ "        "
))
coef_cond
mdl
r_squared
cbind("w_o",r_squared)
r_squared_all <- c()
for(overnight in c("wo_o", "w_o")){
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
# # glmmTMB
# mdl0 <- glmmTMB(fml,
#                data = df_mdl,
#                #ziformula = ~.,  # This specifies the zero-inflation part of the model
#                family = gaussian)
# performance::model_performance(mdl0)
# lme4 + MuMIn (almost identical to glmmTMB without ziformula)
library(lme4)
library(MuMIn)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
summary(mdl)
r_squared <- r.squaredGLMM(mdl)
r_squared_all <- rbind(r_squared_all, cbind("w_o",r_squared))
}
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
fe <- paste0("previous_behavior + previous_urge ", ifelse(outcome == "bhvr", "+ current_urge", ""))
me <- paste0("(1 + ", fe, "| Participant_ID)")
r_squared_all <- c()
for(overnight in c("wo_o", "w_o")){
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
# # glmmTMB
# mdl0 <- glmmTMB(fml,
#                data = df_mdl,
#                #ziformula = ~.,  # This specifies the zero-inflation part of the model
#                family = gaussian)
# performance::model_performance(mdl0)
# lme4 + MuMIn (almost identical to glmmTMB without ziformula)
library(lme4)
library(MuMIn)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
summary(mdl)
r_squared <- r.squaredGLMM(mdl)
r_squared_all <- rbind(r_squared_all, cbind("w_o",r_squared))
}
r_squared_all
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
fe <- paste0("previous_behavior + previous_urge ", ifelse(outcome == "bhvr", "+ current_urge", ""))
me <- paste0("(1 + ", fe, "| Participant_ID)")
r_squared_all <- c()
for(overnight in c("wo_o", "w_o")){
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
# # glmmTMB
# mdl0 <- glmmTMB(fml,
#                data = df_mdl,
#                #ziformula = ~.,  # This specifies the zero-inflation part of the model
#                family = gaussian)
# performance::model_performance(mdl0)
# lme4 + MuMIn (almost identical to glmmTMB without ziformula)
library(lme4)
library(MuMIn)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
summary(mdl)
r_squared <- r.squaredGLMM(mdl)
r_squared_all <- rbind(r_squared_all, cbind(overnight,r_squared))
}
r_squared_all
r_squared_all[,overnight] <- c("without", "with")
r_squared_all
r_squared_all <- as.data.frame(r_squared_all)
r_squared_all[,overnight] <- c("without", "with")
r_squared_all
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
fe <- paste0("previous_behavior + previous_urge ", ifelse(outcome == "bhvr", "+ current_urge", ""))
me <- paste0("(1 + ", fe, "| Participant_ID)")
r_squared_all <- c()
for(overnight in c("wo_o", "w_o")){
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
# # glmmTMB
# mdl0 <- glmmTMB(fml,
#                data = df_mdl,
#                #ziformula = ~.,  # This specifies the zero-inflation part of the model
#                family = gaussian)
# performance::model_performance(mdl0)
# lme4 + MuMIn (almost identical to glmmTMB without ziformula)
library(lme4)
library(MuMIn)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
summary(mdl)
r_squared <- r.squaredGLMM(mdl)
r_squared_all <- rbind(r_squared_all, cbind(overnight,r_squared))
}
r_squared_all <- as.data.frame(r_squared_all)
r_squared_all[,"overnight"] <- c("without", "with")
r_squared_all
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
fe <- paste0("previous_behavior + previous_urge ", ifelse(outcome == "bhvr", "+ current_urge", ""))
me <- paste0("(1 + ", fe, "| Participant_ID)")
r_squared_all <- c()
for(overnight in c("wo_o", "w_o")){
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
# # glmmTMB
# mdl0 <- glmmTMB(fml,
#                data = df_mdl,
#                #ziformula = ~.,  # This specifies the zero-inflation part of the model
#                family = gaussian)
# performance::model_performance(mdl0)
# lme4 + MuMIn (almost identical to glmmTMB without ziformula)
library(lme4)
library(MuMIn)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
summary(mdl)
r_squared <- r.squaredGLMM(mdl)
r_squared_all <- rbind(r_squared_all, cbind(overnight,r_squared))
}
r_squared_all <- as.data.frame(r_squared_all)
# r_squared_all[,"overnight"] <- c("without", "with")
r_squared_all
r2(mdl)
mdl
r2(mdl)
r2_nakagawa(mdl)
outcome <- "bhvr"
ed <- "Vomit"
bhvr_col <- bhvr_urge_pairs[[ed]]$bhvr
urge_col <- bhvr_urge_pairs[[ed]]$urge
df_mdl <- data[,c("overnight", bhvr_col, urge_col, paste0("previous_1_",bhvr_col), paste0("previous_1_",urge_col), "Participant_ID") ]
# unify variable names
df_mdl$previous_behavior <- as.numeric(df_mdl[[paste0("previous_1_",bhvr_col)]])
df_mdl$previous_urge <- as.numeric(df_mdl[[paste0("previous_1_",urge_col)]])
df_mdl$current_behavior <- as.numeric(df_mdl[[bhvr_col]])
df_mdl$current_urge <- as.numeric(df_mdl[[urge_col]])
fe <- paste0("previous_behavior + previous_urge ", ifelse(outcome == "bhvr", "+ current_urge", ""))
me <- paste0("(1 + ", fe, "| Participant_ID)")
r_squared_all <- c()
for(overnight in c("wo_o", "w_o")){
if(overnight == "w_o"){
fe <- paste0("overnight*(",fe,")")
me <- gsub("\\|", "\\)\\|",paste0("(overnight*", me))
}
fml <- formula(paste0(ifelse(outcome == "bhvr", "current_behavior", "current_urge"), " ~ ", fe, "+", me))
set.seed(333)
# # glmmTMB
# mdl0 <- glmmTMB(fml,
#                data = df_mdl,
#                #ziformula = ~.,  # This specifies the zero-inflation part of the model
#                family = gaussian)
# performance::model_performance(mdl0)
# lme4 + MuMIn (almost identical to glmmTMB without ziformula)
library(lme4)
library(MuMIn)
# Fit the model using lme4's lmer function
mdl <- lmer(fml, data = df_mdl, REML = FALSE)
summary(mdl)
r_squared <- r.squaredGLMM(mdl)
r_squared_all <- rbind(r_squared_all, cbind(overnight,r_squared))
print(r2_nakagawa(mdl))
}
r_squared_all <- as.data.frame(r_squared_all)
r_squared_all
mdl
