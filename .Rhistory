for(rn in c("lm","lr")){
agg_df <- agg_df_ls[[rn]]
plot_df <- NULL
for(en in c("_median","_q25", "_q75")){
tmpdf <- pivot_longer(agg_df[,c("id", paste0(c("aic_diff", "bic_diff", "nic_diff", "nicc_diff",
# "k_5_diff",
"k_10_diff", "k_50_diff", "k_80_diff"),en))],
cols = ends_with(en),
names_to = "ic_type",
values_to = paste0("ic_diff",en))
tmpdf$ic_type <- gsub(en,"", tmpdf$ic_type)
if(is.null(plot_df)){plot_df <- tmpdf}
else{
plot_df <- merge(plot_df, tmpdf)
}
}
plot_df$ic_diff <-  plot_df$ic_diff_median
plot_df$ic_diff_l <- plot_df$ic_diff_q25
plot_df$ic_diff_u <- plot_df$ic_diff_q75
plot_df <- merge(plot_df,simulation_conditions, by="id", all.x=T) %>% as.data.frame()
plot_df$cluster_strength <- factor(plot_df$cluster_strength, levels=c("weak", "moderate", "strong"))
levels(plot_df$cluster_strength) <- paste0(levels(plot_df$cluster_strength), " clustering")
plot_df$ic_type <- stringr::str_to_upper(gsub("_diff","",plot_df$ic_type))
plot_df$ic_type <- factor(plot_df$ic_type, levels=c("NICC", "NIC","AIC","BIC",
# "K_5",
"K_10","K_50","K_80"))
levels(plot_df$ic_type) <- c("NICc","NIC","AIC","BIC",
# "5-fold",
"10-fold","50-fold","80-fold")
plot_df <- plot_df %>%
mutate(x_adjusted = case_when(
# ic_type %in% c("5-fold") ~ n_ttl_betas + 0.6,
ic_type %in% c("10-fold") ~ n_ttl_betas + 0.45,
ic_type %in% c("50-fold") ~ n_ttl_betas + 0.3,
ic_type %in% c("80-fold") ~ n_ttl_betas + 0.15,
TRUE ~ n_ttl_betas
))
plot_ls[[rn]] <- ggplot(data = plot_df, aes(x = x_adjusted, y = ic_diff, color = ic_type)) +
geom_point(size=1.5) +
geom_line() +
geom_errorbar(aes(ymin = ic_diff_l, ymax = ic_diff_u),width=0.2) +
geom_hline(aes(yintercept=0)) +
scale_x_continuous(limits = c(5, 11), breaks = seq(5, 11, 1)) +
# coord_trans(y = "sqrt") +
facet_wrap(~ cluster_strength, ncol=3, nrow=1, scales="free_x") +
labs(subtitle = ifelse(rn=="lr", "Binomial", "Gaussian"),
x = "Generating model size",
y = "Error",
color = "Criterion") +
theme_bw()+
scale_color_manual(values = c(
"NICc" = "red",
"NIC" = "lightblue3",
"AIC" = "blue",
"BIC" = "darkorange",
"looDeviance" = "black",
# "5-fold" = "darkgrey",
"10-fold" = "green4",
"50-fold" = "purple",
"80-fold" = "brown"
)) +
theme(text = element_text(face = "bold"),
plot.subtitle = element_text(size=10, face="bold"),
axis.text = element_text(size=8),
legend.title = element_text(size=10),
legend.text = element_text(size=8))
}
p <- ggarrange(plotlist = plot_ls, nrow=2,ncol=1, common.legend = T,legend = "right")
p
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "run_lm_k_fold.RDS"
lm_output_fname <- "run_lr_k_fold.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions_k_fold.R")
output <- as.data.frame(lapply(output, unlist))
res_df <- as.data.frame(merge(output, simulation_conditions, by="id", all.x=T))
res_df$nicc_diff <- (res_df$nicc1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$nic_diff <- (res_df$nic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$aic_diff <- (res_df$aic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$bic_diff <- (res_df$bic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_5_diff <- (res_df$k_5 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_10_diff <- (res_df$k_10 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_50_diff <- (res_df$k_50 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_80_diff <- (res_df$k_80 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
summa <- function(df){
for(cl in c("nicc_diff", "nic_diff", "aic_diff", "bic_diff",
# "k_5_diff", "k_80_diff",
"k_10_diff", "k_50_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.025, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.975, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_k_fold.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "run_lm_k_fold.RDS"
lm_output_fname <- "run_lr_k_fold.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions_k_fold.R")
output <- as.data.frame(lapply(output, unlist))
res_df <- as.data.frame(merge(output, simulation_conditions, by="id", all.x=T))
res_df$nicc_diff <- (res_df$nicc1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$nic_diff <- (res_df$nic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$aic_diff <- (res_df$aic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$bic_diff <- (res_df$bic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_5_diff <- (res_df$k_5 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_10_diff <- (res_df$k_10 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_50_diff <- (res_df$k_50 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_80_diff <- (res_df$k_80 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
summa <- function(df){
for(cl in c("nicc_diff", "nic_diff", "aic_diff", "bic_diff",
# "k_5_diff",
"k_10_diff", "k_50_diff", "k_80_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.025, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.975, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_k_fold.R")
p <- annotate_figure(p, top = text_grob("Approximating K-fold Deviance", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 10, height = 8, bg="white")
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 6, height = 6, bg="white")
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 6, bg="white")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "run_lm_k_fold.RDS"
lm_output_fname <- "run_lr_k_fold.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions_k_fold.R")
output <- as.data.frame(lapply(output, unlist))
res_df <- as.data.frame(merge(output, simulation_conditions, by="id", all.x=T))
res_df$nicc_diff <- (res_df$nicc1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$nic_diff <- (res_df$nic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$aic_diff <- (res_df$aic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$bic_diff <- (res_df$bic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_5_diff <- (res_df$k_5 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_10_diff <- (res_df$k_10 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_50_diff <- (res_df$k_50 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_80_diff <- (res_df$k_80 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
summa <- function(df){
for(cl in c("nicc_diff", "nic_diff", "aic_diff", "bic_diff",
# "k_5_diff",
"k_10_diff", "k_50_diff", "k_80_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.025, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.975, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_k_fold.R")
p <- annotate_figure(p, top = text_grob("Approximating K-fold Deviance", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 6, bg="white")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "run_lm_k_fold.RDS"
lm_output_fname <- "run_lr_k_fold.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions_k_fold.R")
output <- as.data.frame(lapply(output, unlist))
res_df <- as.data.frame(merge(output, simulation_conditions, by="id", all.x=T))
res_df$nicc_diff <- (res_df$nicc1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$nic_diff <- (res_df$nic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$aic_diff <- (res_df$aic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$bic_diff <- (res_df$bic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_5_diff <- (res_df$k_5 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_10_diff <- (res_df$k_10 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_50_diff <- (res_df$k_50 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_80_diff <- (res_df$k_80 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
summa <- function(df){
for(cl in c("nicc_diff", "nic_diff", "aic_diff", "bic_diff",
# "k_5_diff",
"k_10_diff", "k_50_diff", "k_80_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.025, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.975, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_k_fold.R")
p <- annotate_figure(p, top = text_grob("Approximating K-fold Deviance", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 6, bg="white")
plot_ls <- list()
for(rn in c("lm","lr")){
agg_df <- agg_df_ls[[rn]]
plot_df <- NULL
for(en in c("_median","_q25", "_q75")){
tmpdf <- pivot_longer(agg_df[,c("id", paste0(c("aic_diff", "bic_diff", "nic_diff", "nicc_diff",
# "k_5_diff",
"k_10_diff", "k_50_diff", "k_80_diff"),en))],
cols = ends_with(en),
names_to = "ic_type",
values_to = paste0("ic_diff",en))
tmpdf$ic_type <- gsub(en,"", tmpdf$ic_type)
if(is.null(plot_df)){plot_df <- tmpdf}
else{
plot_df <- merge(plot_df, tmpdf)
}
}
plot_df$ic_diff <-  plot_df$ic_diff_median
plot_df$ic_diff_l <- plot_df$ic_diff_q25
plot_df$ic_diff_u <- plot_df$ic_diff_q75
plot_df <- merge(plot_df,simulation_conditions, by="id", all.x=T) %>% as.data.frame()
plot_df$cluster_strength <- factor(plot_df$cluster_strength, levels=c("weak", "moderate", "strong"))
levels(plot_df$cluster_strength) <- paste0(levels(plot_df$cluster_strength), " clustering")
plot_df$ic_type <- stringr::str_to_upper(gsub("_diff","",plot_df$ic_type))
plot_df$ic_type <- factor(plot_df$ic_type, levels=c("NICC", "NIC","AIC","BIC",
# "K_5",
"K_10","K_50","K_80"))
levels(plot_df$ic_type) <- c("NICc","NIC","AIC","BIC",
# "5-fold",
"10-fold","50-fold","80-fold")
plot_df <- plot_df %>%
mutate(x_adjusted = case_when(
# ic_type %in% c("5-fold") ~ n_ttl_betas + 0.6,
ic_type %in% c("10-fold") ~ n_ttl_betas + 0.45,
ic_type %in% c("50-fold") ~ n_ttl_betas + 0.3,
ic_type %in% c("80-fold") ~ n_ttl_betas + 0.15,
TRUE ~ n_ttl_betas
))
plot_ls[[rn]] <- ggplot(data = plot_df, aes(x = x_adjusted, y = ic_diff, color = ic_type)) +
geom_point(size=1) +
geom_line(linewidth=0.2) +
geom_errorbar(aes(ymin = ic_diff_l, ymax = ic_diff_u),width=0.2) +
geom_hline(aes(yintercept=0)) +
scale_x_continuous(limits = c(5, 11), breaks = seq(5, 11, 1)) +
# coord_trans(y = "sqrt") +
facet_wrap(~ cluster_strength, ncol=3, nrow=1, scales="free_x") +
labs(subtitle = ifelse(rn=="lr", "Binomial", "Gaussian"),
x = "Generating model size",
y = "Error",
color = "Criterion") +
theme_bw()+
scale_color_manual(values = c(
"NICc" = "red",
"NIC" = "lightblue3",
"AIC" = "blue",
"BIC" = "darkorange",
"looDeviance" = "black",
# "5-fold" = "darkgrey",
"10-fold" = "green4",
"50-fold" = "purple",
"80-fold" = "brown"
)) +
theme(text = element_text(face = "bold"),
plot.subtitle = element_text(size=12, face="bold"),
axis.text = element_text(size=8),
legend.title = element_text(size=10),
legend.text = element_text(size=8))
}
p <- ggarrange(plotlist = plot_ls, nrow=2,ncol=1, common.legend = T,legend = "right")
source("./sim_plot_k_fold.R")
p <- annotate_figure(p, top = text_grob("Approximating K-fold Deviance", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 6, bg="white")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(ggplot2)
library(tidyr)
library(ggpubr)
lr_output_fname <- "run_lm_k_fold.RDS"
lm_output_fname <- "run_lr_k_fold.RDS"
agg_df_ls <- list()
for(rn in c("lr", "lm")){
if(rn == "lr") output <- readRDS(paste0("./res/", lr_output_fname))
if(rn == "lm") output <- readRDS(paste0("./res/", lm_output_fname))
source("./sim_conditions_k_fold.R")
output <- as.data.frame(lapply(output, unlist))
res_df <- as.data.frame(merge(output, simulation_conditions, by="id", all.x=T))
res_df$nicc_diff <- (res_df$nicc1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$nic_diff <- (res_df$nic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$aic_diff <- (res_df$aic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$bic_diff <- (res_df$bic1 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_5_diff <- (res_df$k_5 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_10_diff <- (res_df$k_10 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_50_diff <- (res_df$k_50 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
res_df$k_80_diff <- (res_df$k_80 - res_df$loodev1)/(res_df$n_cluster*res_df$n_obs_per_cluster)
summa <- function(df){
for(cl in c("nicc_diff", "nic_diff", "aic_diff", "bic_diff",
# "k_5_diff",
"k_10_diff", "k_50_diff", "k_80_diff") ){
df[[paste0(cl,"_mean")]] <- mean(df[[cl]], na.rm=T)
df[[paste0(cl,"_median")]] <- median(df[[cl]], na.rm=T)
df[[paste0(cl,"_q25")]] <- quantile(df[[cl]],0.025, na.rm=T)
df[[paste0(cl,"_q75")]] <- quantile(df[[cl]],0.975, na.rm=T)
df[[paste0(cl,"_se")]] <- sd(df[[cl]], na.rm=T)/nrow(df)
}
return(df)
}
by_id <- group_by(res_df, id)
agg_df <- do(by_id, summa(.))
agg_df <- distinct(agg_df[,c("id",colnames(agg_df)[endsWith(colnames(agg_df), "_mean") |
endsWith(colnames(agg_df), "_median") |
endsWith(colnames(agg_df), "_q25") |
endsWith(colnames(agg_df), "_q75") |
endsWith(colnames(agg_df), "_se")]) ])
agg_df <- as.data.frame(agg_df)
agg_df_ls[[rn]] <- merge(agg_df, simulation_conditions, by="id", all.x=T)
}
source("./sim_plot_k_fold.R")
p <- annotate_figure(p, top = text_grob("Approximating K-fold Deviance", size = 14, face = "bold"))
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 6, bg="white")
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 8, bg="white")
p %>% ggsave(filename=paste0("./res/k_fold.png"), width = 8, height = 7, bg="white")
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(Matrix)
library(lme4)
library(MASS)
library(pROC)
list.of.packages <- c("dplyr",
"rslurm",
"MASS",
"lme4",
"Matrix",
"pROC")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, lib = "/sfs/qumulo/qhome/jq2uw/R/goolf/4.3")
source("./sim_functions.R")
for(u in c("nic", "ass", "stp", "do")){
path = paste0("./utils/",u,"_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
}
source("./sim_conditions_pair.R")
# Parameters
n_cluster <- 50 #c(50) # number of clusters
n_obs_per_cluster <- 2 # number of observations per cluster
n_ttl_betas <- seq(5, 10) # number of total effects
fix_rdm_ratio <- c(0.2) # c(0.2, 0.5, 0.8) # proportion of fix effects
sigma_fix <- c(5) # fix effect beta variance # 5
sigma_rdm_fix_ratio <- 1 # random effect beta variance proportional to fixed effects
ar1_phi <- 0.4 # runif min, max = min + 0.2, 0-0.2 means low within-cluster correlation, 0.4-0.6 median correlation, 0.8-1 high correlation
na_rate <- 0 # 0.3, 0.7,  cluster wise missingness, rnorm centers, 0.3 means low level missingness, 0.7 means high level missingness, 0 means no missing
# 1 means unbalanced missingness, ranging from 0-1
# Define the simulation conditions
param_grid <- expand.grid(n_cluster = n_cluster,
n_obs_per_cluster = n_obs_per_cluster,
n_ttl_betas = n_ttl_betas,
fix_rdm_ratio = fix_rdm_ratio,
sigma_fix = sigma_fix,
sigma_rdm_fix_ratio = sigma_rdm_fix_ratio,
ar1_phi = ar1_phi,
na_rate = na_rate)
simulation_conditions <- as.data.frame(param_grid)
simulation_conditions$id <- seq(1:nrow(param_grid))
simulation_conditions$iter <- 100
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(Matrix)
library(lme4)
library(MASS)
library(pROC)
list.of.packages <- c("dplyr",
"rslurm",
"MASS",
"lme4",
"Matrix",
"pROC")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, lib = "/sfs/qumulo/qhome/jq2uw/R/goolf/4.3")
source("./sim_functions.R")
for(u in c("nic", "ass", "stp", "do")){
path = paste0("./utils/",u,"_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
}
source("./sim_conditions_pair.R")
# for test: sim_condition = simulation_conditions[which(simulation_conditions$id==56),]
run_wrapper_lm <- function(sim_condition) {
results_list = list()
for(i in 1:sim_condition$iter){
tryCatch({
res <- generate_data(sim_condition$n_cluster,
sim_condition$n_obs_per_cluster,
sim_condition$n_ttl_betas,
sim_condition$fix_rdm_ratio,
sim_condition$sigma_fix,
sim_condition$sigma_rdm_fix_ratio,
sim_condition$ar1_phi,
sim_condition$na_rate,
family = "gaussian")
# ground truth mixed effect model
m0 <- fit_eval_glmer(y = res$y,
c = res$c,
data = res$data,
family = "gaussian")
# lr model evaluation matrices
m1 <- fit_eval_glm(y = res$y,
c = res$c,
data = res$data,
family = "gaussian")
stopifnot(!is.na(m1$aic))
# measure bias
bias <- calculate_bias(res, m0, m1)
# measure se estimate
se_ratio <- calculate_se_accuracy(res, m0, m1)
results_list[[i]] = list(id = sim_condition$id,
iter = i,
bias0 = bias$bias0,
bias1 = bias$bias1,
se_ratio0 = se_ratio$se_ratio0,
se_ratio1 = se_ratio$se_ratio1,
aic0 = m0$aic,
aic1 = m1$aic,
bic0 = m0$bic,
bic1 = m1$bic,
nic1 = m1$nic,
nicc1 = m1$nicc,
dev0 = m0$deviance,
dev1 = m1$deviance,
loopred0 = m0$loopred,
loopred1 = m1$loopred,
loodev0 = m0$looDeviance,
loodev1 = m1$looDeviance)
}, error = function(e){
print(e)
print(paste0("skip iteration ",i))
})
}
results_list <- Filter(function(x) !is.null(x), results_list)
toReturn = do.call("rbind", results_list)
return(toReturn)
}
