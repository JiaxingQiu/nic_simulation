center=apply(df_mdl[,x_labels_linear],2,mean,na.rm=TRUE),
scale=apply(df_mdl[,x_labels_linear],2,sd,na.rm=TRUE))
standardize_df$center <- round(standardize_df$center, 4)
standardize_df$scale <- round(standardize_df$scale, 4)
rownames( standardize_df ) <- NULL
df_mdl <- engineer(data = df_mdl,
num_cols = x_labels_linear,
fct_cols = c(x_labels_tag,y_label,"Fold"),
cluster_col = c_label,
imputation = "Median",
standardize_df = standardize_df)
df_mdl <- df_mdl[complete.cases(df_mdl),]
# ---- load preliminary optimal lasso model result ----
x_select_report <- readRDS(paste0(paste0(res_path,"/",mdl_name), "/x_select_report.RDS"))
# opt model's coef table
rownames(x_select_report$infer_obj$opt_model_df) <- NULL
knitr::kable( x_select_report$infer_obj$opt_model_df, format = "html")
x <- x_cols
y <- y_col
c <- c_col
df <- df_mdl
step_lrm <- modified_stepwise_lrm(df,y,x,c,forward = T,
eval_ls = c("Deviance", "AIC", "NIC",
"cvAUC", "cvDeviance",
"looAUC", "looDeviance")[1:5],
eval_by = c("cvAUC", "cvDeviance",
"looAUC", "looDeviance")[2],
nfold=10 )
print(step_lrm$info)
model_size <- c()
x_picked <- c()
dev <- c()
aic <- c()
nic <- c()
cvauc <- c()
cvdev <- c()
for(s in seq(1,length(step_lrm$res_ls))){
model_size <- c(model_size, s)
x_picked <- c(x_picked, step_lrm$res_ls[[s]][['x_pick']])
dev <- c(dev, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$Deviance)
aic <- c(aic, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$AIC)
nic <- c(nic, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$NIC)
cvauc <- c(cvauc, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$cvAUC)
cvdev <- c(cvdev, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$cvDeviance)
}
library(ggplot2)
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="gray", linetype="dotted") +
geom_label(aes(label=x_picked, y=cvdev))
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvdev))
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="gray", linetype="dotted") +
geom_label(aes(label=x_picked, y=cvdev),, parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="gray", linetype="dotted") +
geom_label(aes(label=x_picked, y=cvdev), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="gray", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev), parse = T)
print(step_lrm$info)
model_size <- c()
x_picked <- c()
dev <- c()
aic <- c()
nic <- c()
cvauc <- c()
cvdev <- c()
for(s in seq(1,length(step_lrm$res_ls))){
model_size <- c(model_size, s)
x_picked <- c(x_picked, step_lrm$res_ls[[s]][['x_pick']])
dev <- c(dev, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$Deviance)
aic <- c(aic, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$AIC)
nic <- c(nic, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$NIC)
cvauc <- c(cvauc, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$cvAUC)
cvdev <- c(cvdev, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$cvDeviance)
}
library(ggplot2)
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvdev))
library(ggplot2)
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev, hjust=0.1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev, hjust=1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev, vjust=1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-3), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1.5), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_point(aes(y=cvdev), color="black") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1.5), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_point(aes(y=cvdev), color="black") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
library(ggplot2)
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
p2 <- ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_point(aes(y=cvdev), color="black") #+
#geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T)
p1 <- ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
library(ggpubr)
ggarrange(p1,p2,heights = c(1,2))
ggarrange(p1,p2,heights = c(1,2),nrow=2,ncol=1)
long_res_df <- plot_df %>%
pivot_longer(cols = c(nic, aic, dev),
names_to = "criteria",
values_to = "score") %>%
mutate(criteria = factor(criteria, level=c("nic","aic","dev")))
library(tidyr)
library(dplyr)
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
long_res_df <- plot_df %>%
pivot_longer(cols = c(nic, aic, dev),
names_to = "criteria",
values_to = "score") %>%
mutate(criteria = factor(criteria, level=c("nic","aic","dev")))
levels(long_res_df$criteria) <- c("NIC","AIC","Devience")
p_ics <- ggplot(long_res_df, aes(x = model_size, y = score, color = criteria)) +
geom_line() +
labs(x = "model size", y = "Criteria") +
scale_color_manual(values = c("red", "blue", "black"),
labels = c("NIC", "AIC", "Devience"),
name = NULL)
p_ics
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
long_res_df <- plot_df %>%
pivot_longer(cols = c(nic, aic, dev, cvdev),
names_to = "criteria",
values_to = "score") %>%
mutate(criteria = factor(criteria, level=c("nic","aic","dev","cvdev")))
levels(long_res_df$criteria) <- c("NIC","AIC","Deviance","cvDeviance")
p_ics <- ggplot(long_res_df, aes(x = model_size, y = score, color = criteria)) +
geom_line() +
labs(x = "model size", y = "Criteria") +
scale_color_manual(values = c("red", "blue", "gray", "black"),
labels = c("NIC", "AIC","Deviance","cvDeviance"),
name = NULL)
p_ics
pauc <- ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
print(step_lrm$info)
model_size <- c()
x_picked <- c()
dev <- c()
aic <- c()
nic <- c()
cvauc <- c()
cvdev <- c()
for(s in seq(1,length(step_lrm$res_ls))){
model_size <- c(model_size, s)
x_picked <- c(x_picked, step_lrm$res_ls[[s]][['x_pick']])
dev <- c(dev, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$Deviance)
aic <- c(aic, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$AIC)
nic <- c(nic, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$NIC)
cvauc <- c(cvauc, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$cvAUC)
cvdev <- c(cvdev, step_lrm$res_ls[[s]][[paste0("s",s)]][[1]]$cvDeviance)
}
library(ggplot2)
library(ggpubr)
library(tidyr)
library(dplyr)
plot_df <- data.frame(model_size, x_picked, dev, aic, nic, cvauc, cvdev)
long_res_df <- plot_df %>%
pivot_longer(cols = c(nic, aic, dev, cvdev),
names_to = "criteria",
values_to = "score") %>%
mutate(criteria = factor(criteria, level=c("nic","aic","dev","cvdev")))
levels(long_res_df$criteria) <- c("NIC","AIC","Deviance","cvDeviance")
p_ics <- ggplot(long_res_df, aes(x = model_size, y = score, color = criteria)) +
geom_line() +
labs(x = "model size", y = "Criteria") +
scale_color_manual(values = c("red", "blue", "gray", "black"),
labels = c("NIC", "AIC","Deviance","cvDeviance"),
name = NULL)
# p2 <- ggplot(plot_df, aes(x=model_size))+
#   geom_line(aes(y=nic), color="red")+
#   geom_line(aes(y=aic), color="blue")+
#   geom_line(aes(y=dev), color="gray") +
#   geom_line(aes(y=cvdev), color="black", linetype="dotted") +
#   geom_point(aes(y=cvdev), color="black") +
#   geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T)
p_auc <- ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=cvauc))
ggarrange(p_auc,p_ics,heights = c(1,2),nrow=2,ncol=1)
ggarrange(p_auc,p_ics,heights = c(1,2),nrow=2,ncol=1, common.legend = T, legend = "bottom")
ggarrange(p_auc,p_ics,heights = c(1,2),nrow=2,ncol=1, common.legend = T, legend = "bottom")
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_point(aes(y=cvdev), color="black") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_point(aes(y=cvdev), color="black") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T)
ggplot(plot_df, aes(x=model_size))+
geom_line(aes(y=nic), color="red")+
geom_line(aes(y=aic), color="blue")+
geom_line(aes(y=dev), color="gray") +
geom_line(aes(y=cvdev), color="black", linetype="dotted") +
geom_point(aes(y=cvdev), color="black") +
geom_text(aes(label=x_picked, y=cvdev, vjust=-1), parse = T) +
labs(x="model size", y="criteria")
ggarrange(p_auc,p_ics,heights = c(1,2),nrow=2,ncol=1, common.legend = T, legend = "bottom")
rm(list=ls())
knitr::opts_chunk$set(root.dir="/Users/joyqiu/Documents/Documents JoyQiu Work/Research/NIC",
error=FALSE,
collapse = FALSE,
echo = TRUE,
warning = FALSE,
message = FALSE,
results = FALSE,
fig.dim= c(10,5)
)
library(dplyr)
library(knitr)
library(kableExtra)
# working directory
setwd("/Users/joyqiu/Documents/Documents JoyQiu Work/Research/NIC")
# result path
res_path <- "/Users/joyqiu/Documents/Documents JoyQiu Work/Research/NIC/case/pas/res"
path = paste0("./utils/nic_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
path = paste0("./utils/lss_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
path = paste0("./utils/do_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
path = paste0("./utils/ass_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
path = paste0("./utils/stp_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
library(readxl)
data <- read_excel("./case/pas/data/PAS Challenge Model Data.xlsx")
data_mdl <- assign.dict(data, get.dict(data))
data <- read_excel("./case/pas/data/PAS Challenge Demographic Data.xlsx")
data_demo <- assign.dict(data, get.dict(data))
data <- read_excel("./case/pas/data/PAS Challenge Cross-Validation Folds.xlsx")
data_cv <- assign.dict(data, get.dict(data))
data <- read_excel("./case/pas/data/PAS Challenge Outcome Data.xlsx")
data_outc <- assign.dict(data, get.dict(data))
# merge data in one
data <- merge(data_mdl, data_outc, all=TRUE)
data <- merge(data, data_cv, all=TRUE)
data <- merge(data[,setdiff(colnames(data),"EGA")], data_demo, all=TRUE)
# must be data.frame type object before use dictionary functions
data <- as.data.frame(data)
# Create dictionary for data
data <- remove.dict(data)
data <- assign.dict(data, get.dict(data))
dict_data <- get.dict(data) # get a dictionary for this data
dict_data$type[which(dict_data$varname=="VitalID")] <- "key"
dict_data$unique_per_sbj[which(dict_data$varname=="VitalID")] <- TRUE
rownames(dict_data) <- NULL
# ---- vital sign + demo model ----
mdl_name <- "demo_vital_combined"
c_col <- "VitalID"
y_col <- "Event"
x_cols <- setdiff(colnames(data_mdl),c_col)
x_cols <- c(x_cols[9:16],setdiff(colnames(data_demo),c(c_col,"Fold")))
df_mdl <- distinct(as.data.frame(data[,c("Fold", c_col, y_col, x_cols)]))
# ---- engineering ----
dict_mdl <- get.dict(df_mdl)
dict_mdl$type[which(dict_mdl$varname==c_col)] <- "key"
dict_mdl$unique_per_sbj <- TRUE
rownames(dict_mdl) <- NULL
c_label = dict_mdl$label[which(dict_mdl$varname==c_col)]
y_label = dict_mdl$label[which(dict_mdl$varname==y_col)]
x_labels_linear = dict_mdl$label[which(dict_mdl$type=="num")]
x_labels_linear = setdiff(x_labels_linear, c(y_label, c_label, "Fold"))
x_labels_tag = dict_mdl$label[which(dict_mdl$type=="fct"&dict_mdl$unit=="tag01")]
x_labels_tag = setdiff(x_labels_tag, c(y_label, c_label))
standardize_df <- data.frame(varname = x_labels_linear,
center=apply(df_mdl[,x_labels_linear],2,mean,na.rm=TRUE),
scale=apply(df_mdl[,x_labels_linear],2,sd,na.rm=TRUE))
standardize_df$center <- round(standardize_df$center, 4)
standardize_df$scale <- round(standardize_df$scale, 4)
rownames( standardize_df ) <- NULL
df_mdl <- engineer(data = df_mdl,
num_cols = x_labels_linear,
fct_cols = c(x_labels_tag,y_label,"Fold"),
cluster_col = c_label,
imputation = "Median",
standardize_df = standardize_df)
df_mdl <- df_mdl[complete.cases(df_mdl),]
# ---- load preliminary optimal lasso model result ----
x_select_report <- readRDS(paste0(paste0(res_path,"/",mdl_name), "/x_select_report.RDS"))
# opt model's coef table
rownames(x_select_report$infer_obj$opt_model_df) <- NULL
knitr::kable( x_select_report$infer_obj$opt_model_df, format = "html")
x <- x_cols
y <- y_col
c <- c_col
df <- df_mdl
step_lrm <- modified_stepwise_lrm(df,y,x,c,forward = T,
eval_ls = c("Deviance", "AIC", "NIC",
"cvAUC", "cvDeviance",
"looAUC", "looDeviance")[1:7],
eval_by = c("cvAUC", "cvDeviance",
"looAUC", "looDeviance")[2],
nfold=10 )
??igraph::strength
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(rslurm)
library(Matrix)
library(lme4)
library(MASS)
source("./sim_functions.R")
path = paste0("./nic_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
library(dplyr)
library(Matrix)
library(lme4)
library(MASS)
library(foreach)
library(doParallel)
numCores <- detectCores() - 2  # Leave two cores free for system processes
numCores <- detectCores() - 2  # Leave two cores free for system processes
registerDoParallel(cores=numCores)
c(1:nrow(simulation_conditions))[1:3]
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
library(dplyr)
library(Matrix)
library(lme4)
library(MASS)
library(foreach)
library(doParallel)
source("./sim_functions.R")
path = paste0("./nic_utils")
flst = list.files( path)
sapply(c(paste(path,flst,sep="/")), source, .GlobalEnv)
# Parameters
n_cluster <- c(50, 100) # number of clusters
n_obs_per_cluster <- c(5, 10, 50) # number of observations per cluster
n_ttl_betas <- seq(3,15) # number of total effects
fix_rdm_ratio <- c(0.2, 0.5, 0.8) # proportion of fix effects
# residual_error <- c(0.5, 1)#, 3) # residual error
# Define the simulation conditions
param_grid <- expand.grid(n_cluster = n_cluster,
n_obs_per_cluster = n_obs_per_cluster,
n_ttl_betas = n_ttl_betas,
fix_rdm_ratio = fix_rdm_ratio)
simulation_conditions <- as.data.frame(param_grid)
simulation_conditions$id <- seq(1:nrow(param_grid))
simulation_conditions$iter <- 100
#This function runs each condition (i.e. each row in the simulation condition data.frame)
# for test:
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
run_wrapper <- function(sim_condition) {
results_list = list()
for(i in 1:sim_condition$iter){
tryCatch({
res <- generate_data(sim_condition$n_cluster,
sim_condition$n_obs_per_cluster,
sim_condition$n_ttl_betas,
sim_condition$fix_rdm_ratio)
# ground truth mixed effect model
m0 <- fit_glmer(y = res$y,
c = res$c,
data = res$data)
# lr model evaluation matrices
m1 <- eval_glm(y = res$y,
c = res$c,
data = res$data)
stopifnot(!is.na(m1$aic))
# measure bias
bias <- calculate_bias(res, m0, m1)
results_list[[i]] = list(id = sim_condition$id,
iter = i,
bias0 = bias$bias0,
bias1 = bias$bias1,
aic = m1$aic,
bic = m1$bic,
nic = m1$nic,
dev = m1$deviance,
looauc = m1$looAUC,
loodev = m1$looDeviance)
}, error = function(e){
print(e)
print(paste0("skip iteration ",i))
})
}
results_list <- Filter(function(x) !is.null(x), results_list)
toReturn = do.call("rbind", results_list)
return(toReturn)
}
c(1:nrow(simulation_conditions))[1:3]
results <- foreach(i = c(1:nrow(simulation_conditions))[1:3], .packages = c("pROC", "dplyr", "lme4", "MASS", "Matrix")) %dopar% {
return(run_wrapper(simulation_conditions[i,]))
}
results
# Pre-calculate the row indices for each batch of 10
row_indices <- split(c(1:nrow(simulation_conditions)), ceiling(seq_along(1:nrow(simulation_conditions))/10))
row_indices
# Detect the number of cores
numCores <- detectCores() - 2  # Leave two cores free
numCores
row_indices
names(row_indices)
batch_indices = row_indices[[1]]
batch_indices
row_indices[['1']]
results
saveRDS(results, paste0("./res/result_batch",bn,".RDS"))
bn = 1
saveRDS(results, paste0("./res/result_batch",bn,".RDS"))
# Detect the number of cores
numCores <- detectCores() - 2  # Leave two cores free
registerDoParallel(cores=numCores)
# Pre-calculate the row indices for each batch of 10
row_indices <- split(c(1:nrow(simulation_conditions)), ceiling(seq_along(1:nrow(simulation_conditions))/10))
# Iterate through each batch of indices
for (bn in names(row_indices) ) {
if(!file.exists(paste0("./res/result_batch",bn,".RDS"))){
batch_indices <- row_indices[[bn]]
# Use foreach to run simulations in parallel for the current batch of rows
results <- foreach(i = batch_indices, .packages = c("pROC", "dplyr", "lme4", "MASS", "Matrix")) %dopar% {
run_wrapper(simulation_conditions[i,])
}
saveRDS(results, paste0("./res/result_batch",bn,".RDS"))
}
}
