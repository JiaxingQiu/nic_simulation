library(ggpubr)
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
source("./model_selection_stat.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- ggarrange(p_aggregate, p_example, ncol=1, nrow=2, heights = c(1.2,4), legend = "none")
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
p_model_select_ls <- list()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- ggarrange(p_aggregate, p_example, ncol=1, nrow=2, heights = c(1.2,4), legend = "none")
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
p_model_select_all <- ggarrange(p_model_select_ls, nrow=1, ncol=2)
p_model_select_all
p_model_select_ls
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
p_model_select
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
p_model_select
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
p_model_select_all <- ggarrange(p_model_select_ls, nrow=1, ncol=2)
p_model_select
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
p_model_select_all <- ggarrange(p_model_select_ls, nrow=1, ncol=2)
p_model_select <- ggarrange(p_aggregate, p_example, ncol=1, nrow=2, heights = c(1.2,4),
legend.grob = get_legend(pl_ie[[1]]), legend = "right")
p_model_select
title_text <- paste0(cluster_size," obs/cluster")
p_model_select <- annotate_figure(p_model_select, top = text_grob(title_text, size = 14, face = "bold"))
p_model_select
p_model_select <- annotate_figure(p_model_select, top = text_grob(title_text, size = 14, face = "bold", hjust = 0,x=0))
p_model_select
p_size
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
p_model_select_ls <- list()
p_size_ls <- list()
for(cluster_size in c(5,150)){
source("./model_selection_step_loodev.R")# step-wise by loodev
en <- "" #"_random" #
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- list()
best_df_iter <- list()
for(sn in c("lm","lr")){
res_df_iter[[sn]] <- readRDS(paste0("./res/model_select_",sn,"_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),en,".RDS"))
best_df_iter[[sn]] <- data.frame()
for(i in sort(unique(res_df_iter[[sn]]$iter))){
res_df <- res_df_iter[[sn]] %>% filter(iter==i) %>% as.data.frame()
res_df$loodev[res_df$loodev > quantile(res_df$loodev,0.9)] <- quantile(res_df$loodev,0.9)
res_df_iter[[sn]][which(res_df_iter[[sn]]$iter==i), ] <- res_df
best_df <- data.frame()
for(score in c("loodev", "nic", "aic", "bic")){
best_size <- res_df$model_size[which(res_df[,score]==min(res_df[,score]))][1]
best_score <- res_df[,score][which(res_df[,score]==min(res_df[,score]))][1]
score_1se <- sd(res_df[,score])/sqrt(nrow(res_df))
best_size_1se_min <- min(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_size_1se_max <- max(res_df$model_size[which(abs(res_df[,score]-min(res_df[,score]))<=score_1se)])
best_df <- bind_rows(best_df, data.frame(i,score,best_size, best_score, score_1se, best_size_1se_min,best_size_1se_max))
}
best_df_iter[[sn]] <- bind_rows(best_df_iter[[sn]], best_df)
}
}
source("./model_selection_plot.R")
legend <- get_legend(pl_ie[[1]])
p_model_select_ls[[paste0("nobs",cluster_size)]] <- p_model_select
source("./model_selection_stat.R")
p_size_ls[[paste0("nobs",cluster_size)]] <- p_size
}
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
model_size = 5
cluster_size = 5 # or 150 #
source("./model_selection_step_loodev.R")# step-wise by loodev
# source("./model_selection_lasso.R")# lasso
# source("./model_selection_R2.R")# r2
# source("./model_selection_loodev.R")# step wise by loodev but truth first
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
# poly5
if(model_size==5){
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- run_wrapper_lm(sim_condition)
saveRDS(res_df_iter, paste0("./res/model_select_lm_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),".RDS"))
res_df_iter <- run_wrapper_lr(sim_condition)
saveRDS(res_df_iter, paste0("./res/model_select_lr_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),".RDS"))
}
rm(list=ls())
Q
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
cluster_size = 5 # or 150 #
source("./model_selection_step_loodev.R")# step-wise by loodev
# source("./model_selection_lasso.R")# lasso
# source("./model_selection_R2.R")# r2
# source("./model_selection_loodev.R")# step wise by loodev but truth first
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggpubr)
# poly5
if(model_size==5){
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- run_wrapper_lm(sim_condition)
saveRDS(res_df_iter, paste0("./res/model_select_lm_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),".RDS"))
res_df_iter <- run_wrapper_lr(sim_condition)
saveRDS(res_df_iter, paste0("./res/model_select_lr_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),".RDS"))
}
# # ra
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list=ls())
model_size = 5
cluster_size = 5 # or 150 #
source("./model_selection_step_loodev.R")# step-wise by loodev
# source("./model_selection_lasso.R")# lasso
# source("./model_selection_R2.R")# r2
# source("./model_selection_loodev.R")# step wise by loodev but truth first
# poly5
if(model_size==5){
sim_condition = simulation_conditions[which(simulation_conditions$id==1),]
res_df_iter <- run_wrapper_lm(sim_condition)
saveRDS(res_df_iter, paste0("./res/model_select_lm_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),".RDS"))
res_df_iter <- run_wrapper_lr(sim_condition)
saveRDS(res_df_iter, paste0("./res/model_select_lr_",unique(sim_condition$n_ttl_betas),"_",unique(sim_condition$n_obs_per_cluster),".RDS"))
}
library(gridExtra)
library(grid)
final_plot_with_border <- ggdraw(p_size_all) +
draw_rect(color = "black", fill = NA, size = 1.5, x = 0.5, y = 0.5, width = 1, height = 1)
library(gridExtra)
library(grid)
final_plot_with_border <- ggdraw(p_size_all) +
draw_rect(color = "black", fill = NA, size = 1.5, x = 0.5, y = 0.5, width = 1, height = 1)
library(magick)
img <- image_read(paste0("./res/model_select_error_",model_size,"_all",en,".png"))
en
